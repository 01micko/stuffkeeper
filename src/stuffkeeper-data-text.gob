requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "stuffkeeper-data-item.h"
%}

class StuffKeeper:Data:Text from Gtk:Text:View
{
    private StuffKeeperDataItem *item = {NULL};
    private GtkTextBuffer *buffer = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};

    public
    void
    changed(self, gpointer data)
    {
        GtkTextIter start, stop;
        gchar *text = NULL;
        gtk_text_buffer_get_start_iter(self->_priv->buffer, &start);        
        gtk_text_buffer_get_end_iter(self->_priv->buffer, &stop); 
        text = gtk_text_buffer_get_text(self->_priv->buffer, &start, &stop, FALSE);
        if(self->_priv->field)
        {
           stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field, text);
        }else{
            stuffkeeper_data_item_set_title(self->_priv->item, text);
        }
        g_free(text);
    }

    public
    void
    item_changed(self,const gchar *field, StuffKeeperDataItem *item)
    {
        if(self->_priv->field && field && strcmp(field, self->_priv->field) == 0)
        {
            GtkTextIter start, stop;
            gchar *text = NULL;
            gtk_text_buffer_get_start_iter(self->_priv->buffer, &start);        
            gtk_text_buffer_get_end_iter(self->_priv->buffer, &stop); 
            text = gtk_text_buffer_get_text(self->_priv->buffer, &start, &stop, FALSE);
            gchar *value;
            if(self->_priv->field)
            {
                value = stuffkeeper_data_item_get_string(item, self->_priv->field);
            }else{
                value = stuffkeeper_data_item_get_title(item); 
            }
            if(value)
            {
                if(strcmp(text,value))
                {
                    g_signal_handler_block(self,self->_priv->changed_entry);
                    gtk_text_buffer_set_text(self->_priv->buffer, value, -1);
                    g_signal_handler_unblock(self,self->_priv->changed_entry);
                }
                g_free(value);
            }
            g_free(text);
        }
    }

    public
    GtkWidget *
    new(StuffKeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;
        /* Get buffer */
        obj->_priv->buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(obj));
        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(obj), GTK_WRAP_WORD);
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the entry */
        if(obj->_priv->field)
        {
            value = stuffkeeper_data_item_get_string(item, obj->_priv->field);
        }else{
            value = stuffkeeper_data_item_get_title(item); 
        }
        if(value)
        {
            gtk_text_buffer_set_text(obj->_priv->buffer, value, -1);
            g_free(value);
        }
        obj->_priv->changed_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->buffer), "changed", G_CALLBACK(self_changed), obj);
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            /* Destroyed when the view get destroyed
            if(self->_priv->changed_entry)
            {
                g_signal_handler_disconnect(self->_priv->buffer,self->_priv->changed_entry);
                self->_priv->changed_entry = 0;
            }
            */
            PARENT_HANDLER(obj);
        }

}
