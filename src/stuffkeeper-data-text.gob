requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "misc.h"
#include "stuffkeeper-data-item.h"
%}
%ph{
#include "config.h"
#include <gdk/gdkkeysyms.h>
#if HAVE_GTKSPELL == 1
    #include <gtkspell/gtkspell.h>
#endif
#include "stuffkeeper-data-backend.h"
%}

class Stuffkeeper:Data:Text from Gtk:Scrolled:Window
{
    private StuffkeeperDataItem *item = {NULL};
    private GtkTextBuffer *buffer = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};
    private GdkColor writing ;
    private GdkColor base;
    private GtkWidget *text_view = NULL;
    private GdkAtom atom;
    private GtkTextTag *bold_tag=NULL;
    private GtkTextTag *italic_tag=NULL;
    private GtkTextTag *underline_tag=NULL;

    /* lock signal */
    private gulong signal_backend_locked = {0};

    private guint changed_entry_timeout = {0};
    private
    gboolean
    save_changes(self)
    {
        GtkTextIter start, stop;
        gchar *text = NULL;
        guint8      *spew;
        gsize        spew_length;

        gtk_text_buffer_get_start_iter(self->_priv->buffer, &start);
        gtk_text_buffer_get_end_iter(self->_priv->buffer, &stop);
//        text = gtk_text_buffer_get_text(self->_priv->buffer, &start, &stop, FALSE);

        spew = gtk_text_buffer_serialize (self->_priv->buffer, self->_priv->buffer, self->_priv->atom,
                &start, &stop, &spew_length);
        text = g_base64_encode((guchar *)spew, spew_length);
        g_free(spew);
        if(self->_priv->field)
        {
           stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field, text);
        }else{
            stuffkeeper_data_item_set_title(self->_priv->item, text);
        }
        g_free(text);


        gtk_widget_modify_base(GTK_WIDGET(self), GTK_STATE_NORMAL, &(self->_priv->base));
        self->_priv->changed_entry_timeout = 0;
        gtk_text_buffer_set_modified(self->_priv->buffer, FALSE);
        return FALSE;
    }


    private
    void
    changed(self, gpointer data)
    {
        if(self->_priv->changed_entry_timeout)
        {
            g_source_remove(self->_priv->changed_entry_timeout);
        }
        self->_priv->changed_entry_timeout = g_timeout_add(1000,(GSourceFunc)self_save_changes,self);

        gtk_widget_modify_base(GTK_WIDGET(self), GTK_STATE_NORMAL, &(self->_priv->writing));
    }


    private
    void
    item_changed(self,const gchar *field, StuffkeeperDataItem *item)
    {
        if(self->_priv->field && field && strcmp(field, self->_priv->field) == 0)
        {
            GtkTextIter start, stop;
            gchar *text = NULL;
            gchar *value;
            guint8      *spew;
            gsize        spew_length;

            gtk_text_buffer_get_start_iter(self->_priv->buffer, &start);
            gtk_text_buffer_get_end_iter(self->_priv->buffer, &stop);
//            text = gtk_text_buffer_get_text(self->_priv->buffer, &start, &stop, FALSE);

            /* test code */


            spew = gtk_text_buffer_serialize (self->_priv->buffer, self->_priv->buffer, self->_priv->atom,
                                    &start, &stop, &spew_length);
            text = g_base64_encode((guchar *)spew, spew_length);
            g_free(spew);
            if(self->_priv->field)
            {
                value = stuffkeeper_data_item_get_string(item, self->_priv->field);
            }else{
                value = stuffkeeper_data_item_get_title(item);
            }
            if(value)
            {
                if(strcmp(text,value))
                {
                    gsize out=0;
                    GError *error = NULL;
                    GtkTextIter start,stop;
                    guchar *base= NULL;
                    gboolean result;
                    g_signal_handler_block(self->_priv->buffer,self->_priv->changed_entry);
                    /* Try to decode the entry */
                    base = g_base64_decode(value, &out);
                    if(base != NULL)
                    {
                        gtk_text_buffer_get_bounds(self->_priv->buffer, &start, &stop);
                        gtk_text_buffer_delete(self->_priv->buffer, &start, &stop);
                        result = gtk_text_buffer_deserialize(self->_priv->buffer, self->_priv->buffer, self->_priv->atom,&start,
                                base, out,&error);
                        if(!result)
                        {
                            g_warning("Failed to parse context: %s::%s. default to normal text\n", value, error->message);
                            gtk_text_buffer_set_text(self->_priv->buffer, value, -1);
                            self_changed(self, NULL);
                            g_error_free(error);
                        }
                        g_free(base);
                    }
                    else {
                        gtk_text_buffer_set_text(self->_priv->buffer, value, -1);
                    }

                    gtk_text_buffer_set_modified(self->_priv->buffer, FALSE);
                    g_signal_handler_unblock(self->_priv->buffer,self->_priv->changed_entry);
                }
                g_free(value);
            }
            g_free(text);
        }
    }
    private
    void
    style_set(self, GtkStyle *prev, GtkWidget *wid)
    {

        if(self->_priv->changed_entry_timeout == 0)
        {
            self->_priv->base = (GTK_WIDGET(self)->style->base[GTK_STATE_NORMAL]);
        }
    }

    private
    void
    backend_locked(self, GParamSpec *arg1, StuffkeeperDataBackend *backend)
    {
        gboolean locked = stuffkeeper_data_backend_get_locked(backend);
        gtk_text_view_set_editable(GTK_TEXT_VIEW(self->_priv->text_view), !locked);
    }

    public
    GtkWidget *
    new(StuffkeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;

        obj->_priv->base = (GTK_WIDGET(obj)->style->base[GTK_STATE_NORMAL]);
        obj->_priv->writing.red = 255*255;
        obj->_priv->writing.green = 253*255;
        obj->_priv->writing.blue = 197*255;
        gdk_colormap_alloc_color(gtk_widget_get_default_colormap(), &(obj->_priv->writing), TRUE,TRUE);
        g_signal_connect_swapped(G_OBJECT(obj), "style-set", G_CALLBACK(self_style_set),obj);

        obj->_priv->text_view = gtk_text_view_new();
        gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(obj->_priv->text_view), GTK_WRAP_WORD);
        gtk_text_view_set_accepts_tab(GTK_TEXT_VIEW(obj->_priv->text_view), FALSE);

        gtk_text_view_set_left_margin(GTK_TEXT_VIEW(obj->_priv->text_view), 3);
        gtk_text_view_set_right_margin(GTK_TEXT_VIEW(obj->_priv->text_view), 3);
        gtk_container_add(GTK_CONTAINER(obj), obj->_priv->text_view);
        gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(obj), GTK_POLICY_AUTOMATIC,GTK_POLICY_NEVER);
        if(!g_key_file_get_boolean(config_file, "interface", "has-border",NULL))
        {
            gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(obj),GTK_SHADOW_NONE);
        }else {
            gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(obj),GTK_SHADOW_ETCHED_IN);
        }

        /* Get buffer */
        obj->_priv->buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(obj->_priv->text_view));

        /* Create tagset. (bold and italic) */

        GtkTextTagTable *table;
        /* get buffer's tag table */
        table = gtk_text_buffer_get_tag_table(obj->_priv->buffer);
        /* Create bold tag */
        obj->_priv->bold_tag = gtk_text_tag_new("bold");
        g_object_set(G_OBJECT(obj->_priv->bold_tag), "weight", PANGO_WEIGHT_BOLD,NULL);
        /* add bold_tag to tag table */
        gtk_text_tag_table_add(table, obj->_priv->bold_tag);

        /* Create italic tag */
        obj->_priv->italic_tag = gtk_text_tag_new("italic");
        g_object_set(G_OBJECT(obj->_priv->italic_tag), "style", PANGO_STYLE_ITALIC,NULL);
        /* add italic_tag to tag table */
        gtk_text_tag_table_add(table, obj->_priv->italic_tag);

        /* Create italic tag */
        obj->_priv->underline_tag = gtk_text_tag_new("underline");
        g_object_set(G_OBJECT(obj->_priv->underline_tag), "underline", PANGO_UNDERLINE_SINGLE,NULL);
        /* add underline_tag to tag table */
        gtk_text_tag_table_add(table, obj->_priv->underline_tag);

        obj->_priv->atom = gtk_text_buffer_register_deserialize_tagset (obj->_priv->buffer, NULL);
        gtk_text_buffer_deserialize_set_can_create_tags (obj->_priv->buffer, obj->_priv->atom, FALSE);

        /* store item */
        obj->_priv->item = item;
        /* field */
        obj->_priv->field = g_strdup(field);

        gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(obj->_priv->text_view), GTK_WRAP_WORD);
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

#if HAVE_GTKSPELL == 1
        /* Spell check this entry, if available */
        gtkspell_new_attach(GTK_TEXT_VIEW(obj->_priv->text_view), NULL, NULL);
#endif

        /* update the entry */
        if(obj->_priv->field)
        {
            value = stuffkeeper_data_item_get_string(item, obj->_priv->field);
        }else{
            value = stuffkeeper_data_item_get_title(item);
        }
        if(value)
        {
            gsize out=0;
            guchar *base = g_base64_decode(value, &out);
            GError *error = NULL;
            GtkTextIter start;
            gboolean result;
            if(base != NULL)
            {
                gtk_text_buffer_get_start_iter(obj->_priv->buffer, &start);
                result = gtk_text_buffer_deserialize(obj->_priv->buffer, obj->_priv->buffer, obj->_priv->atom,&start,
                        base, out,&error);
                if(!result)
                {
                    g_warning("Failed to parse context: %s::%s. default to normal text\n", value, error->message);
                    gtk_text_buffer_set_text(obj->_priv->buffer, value, -1);
                    self_changed(obj, NULL);
                    g_error_free(error);
                }
                g_free(base);
            }
            else {
                    gtk_text_buffer_set_text(obj->_priv->buffer, value, -1);
            }
            g_free(value);
        }

        gtk_text_buffer_set_modified(obj->_priv->buffer, FALSE);
        obj->_priv->changed_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->buffer), "modified-changed", G_CALLBACK(self_changed), obj);

        obj->_priv->signal_backend_locked = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_backend(item)),
                                                                     "notify::locked", G_CALLBACK(self_backend_locked), obj);
        self_backend_locked(obj,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));

        g_signal_connect_swapped(G_OBJECT(obj), "key-press-event", G_CALLBACK(self_key_press_event), obj);
        return GTK_WIDGET(obj);
    }

    private gboolean key_press_event(self, GdkEventKey *event, gpointer data)
    {
        if(event->state&GDK_CONTROL_MASK && event->keyval == GDK_b){
            GtkTextIter start, stop;
            if(gtk_text_buffer_get_selection_bounds(self->_priv->buffer, &start, &stop)){
                if( (gtk_text_iter_has_tag(&start, self->_priv->bold_tag) || gtk_text_iter_begins_tag(&start, self->_priv->bold_tag))
                && (gtk_text_iter_has_tag(&stop, self->_priv->bold_tag) || gtk_text_iter_ends_tag(&stop, self->_priv->bold_tag)))
                    gtk_text_buffer_remove_tag(self->_priv->buffer, self->_priv->bold_tag, &start, &stop);
                else
                    gtk_text_buffer_apply_tag(self->_priv->buffer, self->_priv->bold_tag, &start, &stop);
            }
            else{
            }
            self_changed(self,NULL);
            return TRUE;
        }
        else if(event->state&GDK_CONTROL_MASK && event->keyval == GDK_i){
            GtkTextIter start, stop;
            if(gtk_text_buffer_get_selection_bounds(self->_priv->buffer, &start, &stop)){
                if( (gtk_text_iter_has_tag(&start, self->_priv->italic_tag) || gtk_text_iter_begins_tag(&start, self->_priv->italic_tag))
                 && (gtk_text_iter_has_tag(&stop, self->_priv->italic_tag) || gtk_text_iter_ends_tag(&stop, self->_priv->italic_tag)))
                    gtk_text_buffer_remove_tag(self->_priv->buffer, self->_priv->italic_tag, &start, &stop);
                else
                    gtk_text_buffer_apply_tag(self->_priv->buffer, self->_priv->italic_tag, &start, &stop);
            }
            else{
            }
            self_changed(self,NULL);
            return TRUE;
        }
        else if(event->state&GDK_CONTROL_MASK && event->keyval == GDK_u){
            GtkTextIter start, stop;
            if(gtk_text_buffer_get_selection_bounds(self->_priv->buffer, &start, &stop)){
                if( (gtk_text_iter_has_tag(&start, self->_priv->underline_tag) || gtk_text_iter_begins_tag(&start, self->_priv->underline_tag))
                && (gtk_text_iter_has_tag(&stop, self->_priv->underline_tag) || gtk_text_iter_ends_tag(&stop, self->_priv->underline_tag)))
                    gtk_text_buffer_remove_tag(self->_priv->buffer, self->_priv->underline_tag, &start, &stop);
                else
                    gtk_text_buffer_apply_tag(self->_priv->buffer, self->_priv->underline_tag, &start, &stop);
            }
            else{
            }
            self_changed(self,NULL);
            return TRUE;
        }
        return FALSE;
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->signal_backend_locked) {
                g_signal_handler_disconnect(G_OBJECT(stuffkeeper_data_item_get_backend(self->_priv->item)), self->_priv->signal_backend_locked);
                self->_priv->signal_backend_locked = 0;
            }
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            /* Destroyed when the view get destroyed
               if(self->_priv->changed_entry)
               {
               g_signal_handler_disconnect(self->_priv->buffer,self->_priv->changed_entry);
               self->_priv->changed_entry = 0;
               }
               */
            PARENT_HANDLER(obj);
        }
      override (G:Object)
      void
      dispose (G:Object *obj)
      {
          Self *self = SELF(obj);
          if(self->_priv->changed_entry_timeout)
          {
              g_source_remove(self->_priv->changed_entry_timeout);
              self->_priv->changed_entry_timeout = 0;

              self_save_changes(self);
          }

          PARENT_HANDLER(obj);
      }

}
