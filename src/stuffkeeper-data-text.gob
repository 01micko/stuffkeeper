requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "misc.h"
#include "stuffkeeper-data-item.h"
%}
%ph{
#include "config.h"
#if HAVE_GTKSPELL == 1
    #include <gtkspell/gtkspell.h>
#endif
%}

class StuffKeeper:Data:Text from Gtk:Scrolled:Window
{
    private StuffKeeperDataItem *item = {NULL};
    private GtkTextBuffer *buffer = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};
    private GdkColor writing ;
    private GdkColor base;
    private GtkWidget *text_view = NULL;



    private guint changed_entry_timeout = {0};
    private
    gboolean  
    save_changes(self)
    {
        GtkTextIter start, stop;
        gchar *text = NULL;
        gtk_text_buffer_get_start_iter(self->_priv->buffer, &start);        
        gtk_text_buffer_get_end_iter(self->_priv->buffer, &stop); 
        text = gtk_text_buffer_get_text(self->_priv->buffer, &start, &stop, FALSE);
        if(self->_priv->field)
        {
           stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field, text);
        }else{
            stuffkeeper_data_item_set_title(self->_priv->item, text);
        }
        g_free(text);


        gtk_widget_modify_base(GTK_WIDGET(self), GTK_STATE_NORMAL, &(self->_priv->base));
        self->_priv->changed_entry_timeout = 0;
        return FALSE;
    }


    private 
    void
    changed(self, gpointer data)
    {
        if(self->_priv->changed_entry_timeout)
        {
            g_source_remove(self->_priv->changed_entry_timeout);
        }
        self->_priv->changed_entry_timeout = g_timeout_add(1000,(GSourceFunc)self_save_changes,self);

        gtk_widget_modify_base(GTK_WIDGET(self), GTK_STATE_NORMAL, &(self->_priv->writing));
    }


    private 
    void
    item_changed(self,const gchar *field, StuffKeeperDataItem *item)
    {
        if(self->_priv->field && field && strcmp(field, self->_priv->field) == 0)
        {
            GtkTextIter start, stop;
            gchar *text = NULL;
            gtk_text_buffer_get_start_iter(self->_priv->buffer, &start);        
            gtk_text_buffer_get_end_iter(self->_priv->buffer, &stop); 
            text = gtk_text_buffer_get_text(self->_priv->buffer, &start, &stop, FALSE);
            gchar *value;
            if(self->_priv->field)
            {
                value = stuffkeeper_data_item_get_string(item, self->_priv->field);
            }else{
                value = stuffkeeper_data_item_get_title(item); 
            }
            if(value)
            {
                if(strcmp(text,value))
                {
                    g_signal_handler_block(self->_priv->buffer,self->_priv->changed_entry);
                    gtk_text_buffer_set_text(self->_priv->buffer, value, -1);
                    g_signal_handler_unblock(self->_priv->buffer,self->_priv->changed_entry);
                }
                g_free(value);
            }
            g_free(text);
        }
    }
    private 
    void
    style_set(self, GtkStyle *prev, GtkWidget *wid)
    {

        if(self->_priv->changed_entry_timeout == 0)
        {
            self->_priv->base = (GTK_WIDGET(self)->style->base[GTK_STATE_NORMAL]);
        }
    }
    public
    GtkWidget *
    new(StuffKeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;

        obj->_priv->base = (GTK_WIDGET(obj)->style->base[GTK_STATE_NORMAL]);
        obj->_priv->writing.red = 255*255;
        obj->_priv->writing.green = 253*255;
        obj->_priv->writing.blue = 197*255;
        gdk_colormap_alloc_color(gtk_widget_get_default_colormap(), &(obj->_priv->writing), TRUE,TRUE);
        g_signal_connect_swapped(G_OBJECT(obj), "style-set", G_CALLBACK(self_style_set),obj);

        obj->_priv->text_view = gtk_text_view_new();//gtk_scrolled_window_new(NULL, NULL);
        gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(obj->_priv->text_view), GTK_WRAP_WORD);
        gtk_text_view_set_accepts_tab(GTK_TEXT_VIEW(obj->_priv->text_view), FALSE);

        gtk_text_view_set_left_margin(GTK_TEXT_VIEW(obj->_priv->text_view), 3);
        gtk_text_view_set_right_margin(GTK_TEXT_VIEW(obj->_priv->text_view), 3);
        //gtk_scrolled_window_add_with_viewport(GTK_SCROLLED_WINDOW(obj), obj->_priv->text_view);
        gtk_container_add(GTK_CONTAINER(obj), obj->_priv->text_view);
        gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(obj), GTK_POLICY_AUTOMATIC,GTK_POLICY_NEVER);
        if(!g_key_file_get_boolean(config_file, "interface", "has-border",NULL))
        {
            printf("blaat\n");
            gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(obj),GTK_SHADOW_NONE);
        }else {
            gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(obj),GTK_SHADOW_ETCHED_IN);
        }

        /* Get buffer */
        obj->_priv->buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(obj->_priv->text_view));
        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(obj->_priv->text_view), GTK_WRAP_WORD);
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

#if HAVE_GTKSPELL == 1
        /* Spell check this entry, if available */
        gtkspell_new_attach(GTK_TEXT_VIEW(obj->_priv->text_view), NULL, NULL);
#endif

        /* update the entry */
        if(obj->_priv->field)
        {
            value = stuffkeeper_data_item_get_string(item, obj->_priv->field);
        }else{
            value = stuffkeeper_data_item_get_title(item); 
        }
        if(value)
        {
            gtk_text_buffer_set_text(obj->_priv->buffer, value, -1);
            g_free(value);
        }
        obj->_priv->changed_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->buffer), "changed", G_CALLBACK(self_changed), obj);
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            /* Destroyed when the view get destroyed
               if(self->_priv->changed_entry)
               {
               g_signal_handler_disconnect(self->_priv->buffer,self->_priv->changed_entry);
               self->_priv->changed_entry = 0;
               }
               */
            PARENT_HANDLER(obj);
        }
      override (G:Object)
      void
      dispose (G:Object *obj)
      {
          Self *self = SELF(obj);
          if(self->_priv->changed_entry_timeout)
          {
              g_source_remove(self->_priv->changed_entry_timeout);
              self->_priv->changed_entry_timeout = 0;

              self_save_changes(self);
          }

          PARENT_HANDLER(obj);
      }

}
