requires 2.0.10

%ph{

#define KEYFILE_GENERAL "general"
#define KEYFILE_CUSTOM "custom"
%}

%ph{
    #include "stuffkeeper-data-backend.h"
%}
%{
    #include <stdio.h>
%}



class StuffKeeper:Data:Item from G:Object 
{
    private StuffKeeperDataBackend *skdb = {NULL};
    private GKeyFile *data = {NULL};
    private char * path = {NULL} destroywith g_free;
    private GList *tags = {NULL} destroywith g_list_free;

    /**
     * Signals 
     */
    signal last NONE (NONE)
    void
    item_changed(self)
    {
        gint id = self_get_id(self);
        printf("Signal my change: %i\n", id); 
    }

    /* Finalize functions */
    override (G:Object)
    void
    finalize (G:Object *obj)
    {
        Self *self = SELF(obj);
        printf("destroying item\n");
        if(self->_priv->data)
        {
            g_key_file_free(self->_priv->data);
            self->_priv->data = NULL;
        }
        PARENT_HANDLER(obj);
    }
    /**
     * Functions to manage 
     */
    public
    void
    save_yourself(self)
    {
        gint id = self_get_id(self);
        printf("saving myself: %i\n",id);
        if(self->_priv->data)
        {
            char *content;
            gsize size;
            content = g_key_file_to_data(self->_priv->data,&size, NULL);
            g_file_set_contents(self->_priv->path, content, size, NULL);
            g_free(content);
        }
    }

    public
    void
    delete_yourself(self)
    {
        gint id = self_get_id(self);
        printf("Deleting myself: %i\n", id);
        g_key_file_set_integer(self->_priv->data, KEYFILE_GENERAL,"id", -1);
        g_unlink(self->_priv->path);
        g_free(self->_priv->path);
        self->_priv->path = NULL;
    }

    /* Create new StuffKeeperDataBackend */
    public 
        StuffKeeperDataItem *
        new (G:Object *skdb, const gchar *path)
        {

            Self *obj = GET_NEW;
            gint id = g_random_int();
            obj->_priv->skdb = STUFFKEEPER_DATA_BACKEND(skdb);
            obj->_priv->path = g_strdup_printf("%s%c%i", path, G_DIR_SEPARATOR,id);
            obj->_priv->data = g_key_file_new();
            g_key_file_set_integer(obj->_priv->data, KEYFILE_GENERAL,"id", id);
            printf("Creating item: %i\n", id);
            self_save_yourself(obj);
            return obj;
        }

    public
    StuffKeeperDataItem *
    new_from_file (G:Object *skdb, const gchar *file)
    {
        Self *obj = GET_NEW;
        obj->_priv->skdb = STUFFKEEPER_DATA_BACKEND(skdb);
        obj->_priv->data = g_key_file_new();
        obj->_priv->path = g_strdup(file);
        g_key_file_load_from_file(obj->_priv->data, obj->_priv->path, G_KEY_FILE_KEEP_COMMENTS, NULL);
        /* Load the tags */
        gsize items;
        int *tags = g_key_file_get_integer_list(obj->_priv->data, KEYFILE_GENERAL, "tags", &items, NULL);
        if(tags)
        {
           int i;
           for(i=0;i<items;i++)
           {
               StuffKeeperDataTag *tag = stuffkeeper_data_backend_add_tag(obj->_priv->skdb,obj, tags[i]);
               obj->_priv->tags = g_list_append(obj->_priv->tags, tag);
           }
           g_free(tags);
        }
        return obj;
    }

    /* setting fields */

    /**
     * ID (ro)
     */
    public
    gint
    get_id(self)
    {
        gint id = g_key_file_get_integer(self->_priv->data, KEYFILE_GENERAL, "id",NULL);
        return id;
    }
    
    /**
     * Title (rw)
     */
    public 
    gchar *
    get_title(self)
    {
        return g_key_file_get_string(self->_priv->data, KEYFILE_GENERAL, "title", NULL); 
    }


    public 
    void
    set_title(self, const gchar *title)
    {
        g_key_file_set_string(self->_priv->data, KEYFILE_GENERAL, "title", title);
        printf("new title: %s\n", title);
        self_item_changed(self);
    }
    /**
     * Tags
     */
    public
    gboolean
    has_tag(self, const gchar *tag_id)
    {
        return TRUE;
    }
    
}
