requires 2.0.10

%h{
#include <gtk/gtk.h>
#include <glib/gi18n.h>
#include <glade/glade.h>
#include <config.h>
#include "stuffkeeper-data-backend.h"
#include "stuffkeeper-data-schema.h"
#include "stuffkeeper-data-item.h"
%}

class StuffKeeper:Export:HTML from G:Object
{
    private GladeXML *xml;

    /* Parser values */
    private StuffKeeperDataItem *cur_item = {NULL};
    private StuffKeeperDataSchema *cur_schema = {NULL};
    private gchar *cur_field = {NULL};

    public
        G:Object *
    new_schema(GtkListStore *store)
    {
        GtkWidget *dialog = NULL;
        Self *self = GET_NEW;
        GtkWidget *wid;
        GtkCellRenderer *renderer;
        /**
         * Open the dialog 
         */
        self->_priv->xml = glade_xml_new(PACKAGE_DATADIR"/stuffkeeper.glade","export_html_full",NULL);
        dialog = glade_xml_get_widget(self->_priv->xml, "export_html_full");
        /* header */
        /*
        g_signal_connect_swapped(G_OBJECT(glade_xml_get_widget(self->_priv->xml, "event_box_header")), 
                "style-set",
                G_CALLBACK(self_style_set), 
                self);
        */
        wid = glade_xml_get_widget(self->_priv->xml, "cb_type1");
        gtk_combo_box_set_model(GTK_COMBO_BOX(wid), GTK_TREE_MODEL(store));
        gtk_combo_box_set_active(GTK_COMBO_BOX(wid), 0);
        renderer = gtk_cell_renderer_text_new();
        gtk_cell_layout_pack_start(GTK_CELL_LAYOUT(wid),renderer, TRUE);
        gtk_cell_layout_add_attribute(GTK_CELL_LAYOUT(wid),renderer, "text",1 );

        gtk_widget_show_all(GTK_WIDGET(dialog));
        /* */
        g_signal_connect_swapped(G_OBJECT(dialog), "response", G_CALLBACK(self_response2), self);
        return G_OBJECT(self); 

    }

    public
    G:Object *
    new(StuffKeeper:Data:Item  *item)
    {
        GtkWidget *dialog = NULL;
        Self *self = GET_NEW;

        self->_priv->cur_item = item;
        /**
         * Open the dialog 
         */
        self->_priv->xml = glade_xml_new(PACKAGE_DATADIR"/stuffkeeper.glade","export_html",NULL);
        dialog = glade_xml_get_widget(self->_priv->xml, "export_html");
        /* header */
        g_signal_connect_swapped(G_OBJECT(glade_xml_get_widget(self->_priv->xml, "event_box_header_html")), 
                "style-set",
                G_CALLBACK(self_style_set), 
                self);

        gtk_widget_show_all(GTK_WIDGET(dialog));
        /* */
        g_signal_connect_swapped(G_OBJECT(dialog), "response", G_CALLBACK(self_response), self);
        return G_OBJECT(self); 
    }
    /**
     * export
     */
    private
    void
    export_to_html(self)
    {
        const gchar *filename = gtk_entry_get_text(GTK_ENTRY(glade_xml_get_widget(self->_priv->xml,"filename_entry_html")));
        gchar *directory = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(glade_xml_get_widget(self->_priv->xml,"file_chooser_button_html")));
        {
            gchar *path = g_build_path(G_DIR_SEPARATOR_S, directory, filename, NULL);

            printf("path: %s\n", path);
            self_dump_to_file(self,path );


            g_free(path);
        }
        g_free(directory);
    }
    /**
     * Response
     */
    private 
    void
    response2(self, int response, GtkWidget *dialog )
    {
        switch(response)
        {
            case 1:
                {
                    GtkWidget *cb = glade_xml_get_widget(self->_priv->xml, "cb_type1"); 
                    GtkTreeIter iter;
                    GtkTreeModel *model = gtk_combo_box_get_model(GTK_COMBO_BOX(cb));
                    if(gtk_combo_box_get_active_iter(GTK_COMBO_BOX(cb),&iter))
                    {
                        const gchar *filename = gtk_entry_get_text(GTK_ENTRY(glade_xml_get_widget(self->_priv->xml,"filename_entry1")));
                        gchar *directory = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(glade_xml_get_widget(self->_priv->xml,"file_chooser_button1")));
                        StuffKeeperDataSchema *schema = NULL;
                        gtk_tree_model_get(model, &iter,3, &schema, -1); 
                        self->_priv->cur_schema = schema;


                        {
                            gchar *path = g_build_path(G_DIR_SEPARATOR_S, directory, filename, NULL);

                            printf("path: %s\n", path);
                            self_dump_to_file(self,path );


                            g_free(path);
                        }
                        g_free(directory);

                    }
                }
            default:
                break;
        }
        gtk_widget_destroy(GTK_WIDGET(dialog));
        g_object_unref(self);
    }


    private
    void
    response(self, int response, GtkWidget *dialog )
    {
        switch(response)
        {
            case 1:
                self_export_to_html(self);
            default:
                break;
        }
        gtk_widget_destroy(GTK_WIDGET(dialog));
        g_object_unref(self);
    }

    /**
     * header 
     */

    private
    void
    style_set(self, GtkStyle *style, GtkWidget *wid)
    {
        g_signal_handlers_block_by_func(G_OBJECT(wid), self_style_set,self);
        gtk_widget_modify_bg(wid,
                GTK_STATE_NORMAL, 
                &((wid)->style->bg[GTK_STATE_SELECTED]));
        gtk_widget_modify_text(glade_xml_get_widget(self->_priv->xml, "label_title_html"), 
                GTK_STATE_NORMAL, 
                &((wid)->style->text[GTK_STATE_SELECTED]));
        gtk_widget_modify_fg(glade_xml_get_widget(self->_priv->xml, "label_title_html"), 
                GTK_STATE_NORMAL, 
                &((wid)->style->fg[GTK_STATE_SELECTED]));
        g_signal_handlers_unblock_by_func(G_OBJECT(wid), self_style_set,self);
    }
    /**
     * Handler to free data when object is destroyed
     */
    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            //Self *self = SELF(obj);
            PARENT_HANDLER(obj);
        }

    /**
     * actual work is done here
     */
    private 
    void 
    parse_field(self,FILE *fp_in, FILE *fp_out)
    {
        int a;
        int i= 0;
        char buffer[256];

        a = fgetc(fp_in);
        while(a != '}') {
            buffer[i] = a;
            i++;
            a = fgetc(fp_in);
        };
        buffer[i] = '\0';
        if(strcmp("title", buffer) == 0 && self->_priv->cur_item)
        {
            int i = 0;
            gchar *temp = stuffkeeper_data_item_get_title(self->_priv->cur_item);
            if(temp)
            {
                gchar *esc = g_markup_escape_text(temp, -1); 
                for(i=0;esc[i];i++)
                {
                    if(esc[i] == '\n')
                        fputs("<BR />", fp_out);
                    else
                        fputc(esc[i], fp_out);
                }
                g_free(esc);
                g_free(temp);
            }
        }
        if(self->_priv->cur_field)
        {
            if(strcmp("name", buffer) == 0)
            {
                StuffKeeperDataSchema *schema = stuffkeeper_data_item_get_schema(self->_priv->cur_item);
                gchar *temp = stuffkeeper_data_schema_get_field_name(schema, self->_priv->cur_field);
                gchar *esc = g_markup_escape_text(temp, -1); 
                fputs(esc, fp_out);
                g_free(esc);
                g_free(temp);
            }
            else if(strcmp("field", buffer) == 0)
            {
                StuffKeeperDataSchema *schema = stuffkeeper_data_item_get_schema(self->_priv->cur_item);
                FieldType type = stuffkeeper_data_schema_get_field_type(schema, self->_priv->cur_field); 
               
                if(type == FIELD_TYPE_LIST) {
                    gsize len;
                    gchar **items =stuffkeeper_data_item_get_list(self->_priv->cur_item, self->_priv->cur_field, &len);
                    if(items)
                    {
                        int j;
                        fputs("<div id='list'>",fp_out);
                        for(j=0;j<len;j++) 
                        {
                            gchar *esc = g_markup_escape_text(items[j], -1); 
                            for(i=0;esc[i];i++) {
                                if(esc[i] == '\\' && esc[i+1] == 'n') {
                                    fputs("<BR />", fp_out);
                                    i++;
                                } else
                                    fputc(esc[i], fp_out);
                            }
                            fputs("<BR />", fp_out);

                            g_free(esc);
                        }
                        fputs("</div>",fp_out);
                    }

                }else 
                {
                    gchar *temp = stuffkeeper_data_item_get_string(self->_priv->cur_item, self->_priv->cur_field);
                    if(temp)
                    {

                        gchar *esc = g_markup_escape_text(temp, -1); 
                        int i = 0;


                        if(type == FIELD_TYPE_LINK)
                        {
                            fputs("<div id='link'>",fp_out);
                            fputs("<a href='",fp_out);
                            fputs(temp,fp_out);
                            fputs("'>",fp_out);
                            for(i=0;esc[i];i++) {
                                if(esc[i] == '\\' && esc[i+1] == 'n') {
                                    fputs("<BR />", fp_out);
                                    i++;
                                } else
                                    fputc(esc[i], fp_out);
                            }
                            fputs("</a>",fp_out);
                            fputs("</div>",fp_out);
                        }
                        else 
                        {

                            fputs("<div id='field'>",fp_out);
                            for(i=0;esc[i];i++) {
                                if(esc[i] == '\\' && esc[i+1] == 'n') {
                                    fputs("<BR />", fp_out);
                                    i++;
                                } else
                                    fputc(esc[i], fp_out);
                            }
                            fputs("</div>",fp_out);

                        }
                        g_free(esc);
                        g_free(temp);
                    }
                }
            }

        }
    }
    private
    void 
    parse_file(self,FILE *fp_in, FILE *fp_out)
    {
        int a;

        while((a = fgetc(fp_in)) != EOF)
        {
            if(a == '{')
            {
                self_parse_field(self,fp_in, fp_out);
            }
            else if (a == '[')
            {
                a = fgetc(fp_in);
                if(a == 'i' && self->_priv->cur_item)
                {
                    gsize length=0;
                    char **retv = stuffkeeper_data_schema_get_fields(stuffkeeper_data_item_get_schema(self->_priv->cur_item),&length);
                    long point = ftell(fp_in);
                    int i;
                    for(i=0;i<length;i++)
                    {
                        fseek(fp_in, point, SEEK_SET);
                        self->_priv->cur_field = retv[i];
                        self_parse_file(self, fp_in, fp_out);
                    }
                    g_strfreev(retv);
                    self->_priv->cur_field = NULL;
                }
                if(a == 's' && self->_priv->cur_item == NULL && self->_priv->cur_schema != NULL)
                {
                    GList *list = stuffkeeper_data_schema_get_items(self->_priv->cur_schema);
                    if(list)
                    {
                        long point = ftell(fp_in);
                        GList *node;
                        for(node = g_list_first(list);node ; node = g_list_next(node))
                        {
                            fseek(fp_in, point, SEEK_SET);
                            self->_priv->cur_item = node->data;
                            self_parse_file(self, fp_in, fp_out);
                            self->_priv->cur_item = NULL;
                        }

                        g_list_free(list);
                    }
                }
                else
                {
                    self_parse_file(self, fp_in, fp_out);
                }
            }
            else if (a == ']')
            {
                return;
            }
            else
            {
                fputc(a,fp_out);
            }
        }
    }
    private
    void
    dump_to_file(self,const gchar *path)
    {
        FILE *fp_in = fopen(PACKAGE_DATADIR"/html/index.template", "r");
        FILE *fp_out = fopen(path,"w");

        
        self_parse_file(self, fp_in, fp_out);

        fclose(fp_in);
        fflush(fp_out);
        fclose(fp_out);
    }
}
