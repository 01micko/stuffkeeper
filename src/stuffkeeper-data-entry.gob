requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "stuffkeeper-data-item.h"
%}

class StuffKeeper:Data:Entry from Gtk:Entry
{
    private StuffKeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};

    public
    void
    changed(self, gpointer data)
    {
        const gchar *text = gtk_entry_get_text(GTK_ENTRY(self));
        if(self->_priv->field)
        {
           stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field, text);
        }else{
            stuffkeeper_data_item_set_title(self->_priv->item, text);
        }
    }

    public
    void
    item_changed(self,const gchar *field, StuffKeeperDataItem *item)
    {
        const gchar *text = gtk_entry_get_text(GTK_ENTRY(self));
        gchar *value = NULL;
        if(self->_priv->field)
        {
            if(field && strcmp(field, self->_priv->field) == 0)
            {
                value = stuffkeeper_data_item_get_string(item, self->_priv->field);
            }
        }else{
            value = stuffkeeper_data_item_get_title(item); 
        }
        if(value)
        {
            if(strcmp(text,value))
            {
                g_signal_handler_block(self,self->_priv->changed_entry);
                gtk_entry_set_text(GTK_ENTRY(self), value);
                g_signal_handler_unblock(self,self->_priv->changed_entry);
            }
            g_free(value);
        }
    }

    public
    GtkWidget *
    new(StuffKeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;

        gtk_entry_set_has_frame(GTK_ENTRY(obj), FALSE);

        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the entry */
        if(obj->_priv->field)
        {
            value = stuffkeeper_data_item_get_string(item, obj->_priv->field);
        }else{
            value = stuffkeeper_data_item_get_title(item); 
        }
        if(value)
        {
            gtk_entry_set_text(GTK_ENTRY(obj), value);
            g_free(value);
        }
        /* this is destroyed when self is destroyed, so no need to disconnect myself */
        obj->_priv->changed_entry = g_signal_connect(G_OBJECT(obj), "changed", G_CALLBACK(self_changed), NULL);
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            PARENT_HANDLER(obj);
        }

}
