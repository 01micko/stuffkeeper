

%h{
#include <gtk/gtk.h>
#include "misc.h"
#include "stuffkeeper-data-item.h"
%}

%ph{
#include "stuffkeeper-data-backend.h"
%}

class StuffKeeper:Data:Entry from Gtk:Entry 
{
    private StuffKeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};

    private guint changed_entry_timeout = {0};
    private GdkColor writing ;
    private GdkColor base;
    private GdkColor text;

    /* lock signal */
    private gulong signal_backend_locked = {0};

    private
    gboolean  
    save_changes(self)
    {
        const gchar *text = gtk_entry_get_text(GTK_ENTRY(self));
        if(self->_priv->field)
        {
            stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field, text);
        }else{
            stuffkeeper_data_item_set_title(self->_priv->item, text);
        }


        gtk_widget_modify_text(GTK_WIDGET(self), GTK_STATE_NORMAL, &(self->_priv->text));
        gtk_widget_modify_base(GTK_WIDGET(self), GTK_STATE_NORMAL, &(self->_priv->base));
        self->_priv->changed_entry_timeout = 0;
        return FALSE;
    }



    private
    void
    changed(self, gpointer data)
    {
        if(self->_priv->changed_entry_timeout)
        {
            g_source_remove(self->_priv->changed_entry_timeout);
        }
        self->_priv->changed_entry_timeout = g_timeout_add(1000,(GSourceFunc)self_save_changes,self);

        gtk_widget_modify_text(GTK_WIDGET(self), GTK_STATE_NORMAL, &(GTK_WIDGET(self)->style->black));
        gtk_widget_modify_base(GTK_WIDGET(self), GTK_STATE_NORMAL, &(self->_priv->writing));
    }

    private
    void
    item_changed(self,const gchar *field, StuffKeeperDataItem *item)
    {
        const gchar *text = gtk_entry_get_text(GTK_ENTRY(self));
        gchar *value = NULL;
        if(self->_priv->field)
        {
            if(field && strcmp(field, self->_priv->field) == 0)
            {
                value = stuffkeeper_data_item_get_string(item, self->_priv->field);
            }
        }else{
            value = stuffkeeper_data_item_get_title(item); 
            if(stuffkeeper_data_item_has_generated_title(item))
                gtk_editable_set_editable(GTK_EDITABLE(self), FALSE);
            else
                gtk_editable_set_editable(GTK_EDITABLE(self), TRUE);
        }
        if(value)
        {
            if(strcmp(text,value))
            {
                g_signal_handler_block(self,self->_priv->changed_entry);
                gtk_entry_set_text(GTK_ENTRY(self), value);
                g_signal_handler_unblock(self,self->_priv->changed_entry);
            }
            g_free(value);
        }
    }
    private 
        void
    style_set(self, GtkStyle *prev, GtkWidget *wid)
    {
        if(self->_priv->changed_entry_timeout == 0) {
            self->_priv->base = (GTK_WIDGET(self)->style->base[GTK_STATE_NORMAL]);
            self->_priv->text = (GTK_WIDGET(self)->style->text[GTK_STATE_NORMAL]);
        }
    }
    private
    void
    backend_locked(self, GParamSpec *arg1, StuffKeeperDataBackend *backend)
    {
        gboolean locked = stuffkeeper_data_backend_get_locked(backend);
        if(self->_priv->field == NULL) /* if it is an title */
        {
            if(stuffkeeper_data_item_has_generated_title(self->_priv->item))
            {
                gtk_editable_set_editable(GTK_EDITABLE(self), FALSE);
                return;
            }
        }
        gtk_editable_set_editable(GTK_EDITABLE(self), !locked);
    }
    public
    GtkWidget *
    new(StuffKeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;

        if(!g_key_file_get_boolean(config_file, "interface", "has-border",NULL))
        gtk_entry_set_has_frame(GTK_ENTRY(obj), FALSE);

    
    


        obj->_priv->base = (GTK_WIDGET(obj)->style->base[GTK_STATE_NORMAL]);
        obj->_priv->text = (GTK_WIDGET(obj)->style->text[GTK_STATE_NORMAL]);
        obj->_priv->writing.red = 255*255;
        obj->_priv->writing.green = 253*255;
        obj->_priv->writing.blue = 197*255;
        gdk_colormap_alloc_color(gtk_widget_get_default_colormap(), &(obj->_priv->writing), TRUE,TRUE);
        g_signal_connect_swapped(G_OBJECT(obj), "style-set", G_CALLBACK(self_style_set),obj);


        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the entry */
        if(obj->_priv->field)
        {
            value = stuffkeeper_data_item_get_string(item, obj->_priv->field);
        }else{
            value = stuffkeeper_data_item_get_title(item); 
            if(stuffkeeper_data_item_has_generated_title(item))
                gtk_editable_set_editable(GTK_EDITABLE(obj), FALSE);
            else
                gtk_editable_set_editable(GTK_EDITABLE(obj), TRUE);
        }
        if(value)
        {
            gtk_entry_set_text(GTK_ENTRY(obj), value);
            g_free(value);
        }
        obj->_priv->signal_backend_locked = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_backend(item)), 
                                                                     "notify::locked", G_CALLBACK(self_backend_locked), obj);
        self_backend_locked(obj,NULL, stuffkeeper_data_item_get_backend(item));

        /* this is destroyed when self is destroyed, so no need to disconnect myself */
        obj->_priv->changed_entry = g_signal_connect(G_OBJECT(obj), "changed", G_CALLBACK(self_changed), NULL);
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->signal_backend_locked) {                                                                     
                g_signal_handler_disconnect(G_OBJECT(stuffkeeper_data_item_get_backend(self->_priv->item)), self->_priv->signal_backend_locked);
                self->_priv->signal_backend_locked = 0;
            }
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
           if(self->_priv->changed_entry_timeout)
            {
                g_source_remove(self->_priv->changed_entry_timeout);
                self->_priv->changed_entry_timeout = 0;

                self_save_changes(self);
            }


            PARENT_HANDLER(obj);
        }

}
