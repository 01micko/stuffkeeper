/* Generated by GOB (v2.0.14)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>
#ifndef __STUFFKEEPER_DATA_TAG_H__
#define __STUFFKEEPER_DATA_TAG_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*
 * Type checking and casting macros
 */
#define STUFFKEEPER_TYPE_DATA_TAG	(stuffkeeper_data_tag_get_type())
#define STUFFKEEPER_DATA_TAG(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), stuffkeeper_data_tag_get_type(), StuffKeeperDataTag)
#define STUFFKEEPER_DATA_TAG_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), stuffkeeper_data_tag_get_type(), StuffKeeperDataTag const)
#define STUFFKEEPER_DATA_TAG_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), stuffkeeper_data_tag_get_type(), StuffKeeperDataTagClass)
#define STUFFKEEPER_IS_DATA_TAG(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), stuffkeeper_data_tag_get_type ())

#define STUFFKEEPER_DATA_TAG_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), stuffkeeper_data_tag_get_type(), StuffKeeperDataTagClass)

/* Private structure type */
typedef struct _StuffKeeperDataTagPrivate StuffKeeperDataTagPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_STUFFKEEPER_DATA_TAG__
#define __TYPEDEF_STUFFKEEPER_DATA_TAG__
typedef struct _StuffKeeperDataTag StuffKeeperDataTag;
#endif
struct _StuffKeeperDataTag {
	GObject __parent__;
	/*< private >*/
	StuffKeeperDataTagPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _StuffKeeperDataTagClass StuffKeeperDataTagClass;
struct _StuffKeeperDataTagClass {
	GObjectClass __parent__;
	/*signal*/void (* tag_changed) (StuffKeeperDataTag * self);
};


/*
 * Public methods
 */
GType	stuffkeeper_data_tag_get_type	(void);
void 	stuffkeeper_data_tag_tag_changed	(StuffKeeperDataTag * self);
StuffKeeperDataTag * 	stuffkeeper_data_tag_new_from_file	(const gchar * file);
StuffKeeperDataTag * 	stuffkeeper_data_tag_new_with_id	(const gchar * path,
					gint id);
StuffKeeperDataTag * 	stuffkeeper_data_tag_new	(const gchar * path);
gint 	stuffkeeper_data_tag_get_id	(StuffKeeperDataTag * self);
gchar * 	stuffkeeper_data_tag_get_title	(StuffKeeperDataTag * self);
void 	stuffkeeper_data_tag_set_title	(StuffKeeperDataTag * self,
					const gchar * title);
void 	stuffkeeper_data_tag_save_yourself	(StuffKeeperDataTag * self);
void 	stuffkeeper_data_tag_delete_yourself	(StuffKeeperDataTag * self);

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define stuffkeeper_data_tag_connect__tag_changed(object,func,data)	g_signal_connect(STUFFKEEPER_DATA_TAG(__extension__ ({StuffKeeperDataTag *___object = (object); ___object; })),"tag_changed",(GCallback) __extension__ ({void (* ___tag_changed) (StuffKeeperDataTag * ___fake___self, gpointer ___data ) = (func); ___tag_changed; }), (data))
#define stuffkeeper_data_tag_connect_after__tag_changed(object,func,data)	g_signal_connect_after(STUFFKEEPER_DATA_TAG(__extension__ ({StuffKeeperDataTag *___object = (object); ___object; })),"tag_changed",(GCallback) __extension__ ({void (* ___tag_changed) (StuffKeeperDataTag * ___fake___self, gpointer ___data ) = (func); ___tag_changed; }), (data))
#define stuffkeeper_data_tag_connect_data__tag_changed(object,func,data,destroy_data,flags)	g_signal_connect_data(STUFFKEEPER_DATA_TAG(__extension__ ({StuffKeeperDataTag *___object = (object); ___object; })),"tag_changed",(GCallback) __extension__ ({void (* ___tag_changed) (StuffKeeperDataTag * ___fake___self, gpointer ___data ) = (func); ___tag_changed; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define stuffkeeper_data_tag_connect__tag_changed(object,func,data)	g_signal_connect(STUFFKEEPER_DATA_TAG(object),"tag_changed",(GCallback)(func),(data))
#define stuffkeeper_data_tag_connect_after__tag_changed(object,func,data)	g_signal_connect_after(STUFFKEEPER_DATA_TAG(object),"tag_changed",(GCallback)(func),(data))
#define stuffkeeper_data_tag_connect_data__tag_changed(object,func,data,destroy_data,flags)	g_signal_connect_data(STUFFKEEPER_DATA_TAG(object),"tag_changed",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
