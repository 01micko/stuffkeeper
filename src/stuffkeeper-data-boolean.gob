requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "stuffkeeper-data-item.h"
%}
%ph{
#include "stuffkeeper-data-backend.h"
%}


class StuffKeeper:Data:Boolean from Gtk:Check:Button
{
    private StuffKeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};

    /* lock signal */
    private gulong signal_backend_locked = {0};

    public
    void
    changed(self, gpointer data)
    {
        const gboolean value = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(self));
        stuffkeeper_data_item_set_boolean(self->_priv->item, self->_priv->field, value);
    }

    public
    void
    item_changed(self,const gchar *field, StuffKeeperDataItem *item)
    {
        const gboolean old_value = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(self));
        gboolean value;
        if(field && self->_priv->field && strcmp(self->_priv->field, field) == 0)
        {
            value = stuffkeeper_data_item_get_boolean(item, self->_priv->field);
            if(value != old_value)
            {
                g_signal_handler_block(self,self->_priv->changed_entry);
                gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(self), value);
                g_signal_handler_unblock(self,self->_priv->changed_entry);
            }
        }
    }
    private
        void
    backend_locked(self, GParamSpec *arg1, StuffKeeperDataBackend *backend)
    {
        gboolean locked = stuffkeeper_data_backend_get_locked(backend);
        gtk_widget_set_sensitive(GTK_WIDGET(self), !locked);
    }



    public
    GtkWidget *
    new(StuffKeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        gboolean value =FALSE;

        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the entry */
        value = stuffkeeper_data_item_get_boolean(item, obj->_priv->field);
        gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(obj), value);

        obj->_priv->changed_entry = g_signal_connect(G_OBJECT(obj), "toggled", G_CALLBACK(self_changed), NULL);
        obj->_priv->signal_backend_locked = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_backend(item)), 
                                                                     "notify::locked", G_CALLBACK(self_backend_locked), obj);
        
        self_backend_locked(obj,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->signal_backend_locked) {                                                                     
                g_signal_handler_disconnect(G_OBJECT(stuffkeeper_data_item_get_backend(self->_priv->item)), self->_priv->signal_backend_locked);
                self->_priv->signal_backend_locked = 0;
            }
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            PARENT_HANDLER(obj);
        }

}
