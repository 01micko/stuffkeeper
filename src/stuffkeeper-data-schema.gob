requires 2.0.10

%ph{
#include <glib/gstdio.h>
#include <stdio.h>
#define KEYFILE_GENERAL "general"
#define KEYFILE_FIELD_TYPES "field-types" 
#define KEYFILE_FIELD_NAMES "field-names" 
#include "stuffkeeper-data-item.h"

%}
%h{
    typedef enum _FieldType{
        FIELD_TYPE_STRING = 0,
        FIELD_TYPE_INTEGER = 1,
        FIELD_TYPE_BOOLEAN = 2,
        FIELD_TYPE_RATING = 3,
        FIELD_TYPE_LIST = 4,
        NUM_FIELDS
    } FieldType;
    extern char *FieldNames[NUM_FIELDS];
%}
%ph{
        char *FieldNames[NUM_FIELDS] = {
        "String", // FIELD_TYPE_STRING
        "Integer", // FIELD_TYPE_INTEGER
        "Boolean", // FIELD_TYPE_BOOLEAN
        "Slider", // FIELD_TYPE_RATING
        "List" //FIELD_TYPE_LIST
    };



%}
class StuffKeeper:Data:Schema from G:Object 
{
    private gboolean changed = {FALSE};
    private GKeyFile *data = {NULL};
    private char * path = {NULL} destroywith g_free;



    private GList *items = {NULL} destroywith g_list_free;

    /**
     * Signals 
     */
    signal last NONE (NONE)
        void
        schema_changed(self)
        {

        }
    signal last NONE (STRING)
        void
        schema_field_changed(self,const gchar *field)
        {
        }
   signal last NONE (STRING)
        void
        schema_field_added(self,const gchar *field)
        {
        }

   signal last NONE (STRING)
        void
        schema_field_removed(self,const gchar *field)
        {
        }

    /**
     * Constructors
     */
    public
    StuffKeeperDataSchema *
        new_from_file (const gchar *file)
        {
            Self *obj = GET_NEW;
            obj->_priv->data = g_key_file_new();
            obj->_priv->path = g_strdup(file);
            g_key_file_load_from_file(obj->_priv->data, obj->_priv->path, G_KEY_FILE_KEEP_COMMENTS, NULL);
            return obj;
        }

    public
     StuffKeeperDataSchema *
        new_with_id (const gchar *path,gint id)
        {
            Self *obj = GET_NEW;
            obj->_priv->path = g_strdup_printf("%s%c%i", path, G_DIR_SEPARATOR,id);
            obj->_priv->data = g_key_file_new();
            g_key_file_set_integer(obj->_priv->data, KEYFILE_GENERAL,"id", id);
            self_save_yourself(obj);
            return obj;
        }
    public 
        StuffKeeperDataSchema *
        new (const gchar *path)
        {

            Self *obj = GET_NEW;
            gint id = g_random_int();
            obj->_priv->path = g_strdup_printf("%s%c%i", path, G_DIR_SEPARATOR,id);
            obj->_priv->data = g_key_file_new();
            g_key_file_set_integer(obj->_priv->data, KEYFILE_GENERAL,"id", id);
            self_save_yourself(obj);
            return obj;
        }                                                                          
                
    /**
     * Functions to manage 
     */
    public
        void
        save_yourself(self)
        {
            if(self->_priv->data && self->_priv->changed == TRUE)
            {
                char *content;
                gsize size=0;
                content = g_key_file_to_data(self->_priv->data,&size, NULL);
                g_file_set_contents(self->_priv->path, content, size, NULL);
                g_free(content);
                /* reset changed */
                self->_priv->changed = FALSE;
            }
        }

    public
        void
        delete_yourself(self)
        {
            g_key_file_set_integer(self->_priv->data, KEYFILE_GENERAL,"id", -1);
            g_unlink(self->_priv->path);
            g_free(self->_priv->path);
            self->_priv->path = NULL;
        }

    /**
     * ID (ro)
     */
    public
        gint
        get_id(self)
        {
            gint id = g_key_file_get_integer(self->_priv->data, KEYFILE_GENERAL, "id",NULL);
            return id;
        }

    /**
     * Title (rw)
     */
    public 
    gchar *
    get_title(self)
    {
        return g_key_file_get_string(self->_priv->data, KEYFILE_GENERAL, "title", NULL); 
    }


    public 
    void
    set_title(self, const gchar *title)
    {
        g_key_file_set_string(self->_priv->data, KEYFILE_GENERAL, "title", title);
        self_schema_changed(self);
        /* mark changed */
        self->_priv->changed =TRUE;
    }
    /**
     */
    public
    gchar **
    get_fields(self, gsize *size)
    {
        gchar **retv = NULL;
        *size = 0;
        retv = g_key_file_get_keys(self->_priv->data, KEYFILE_FIELD_TYPES,size, NULL);
        return retv;
    }
    public 
    FieldType 
    get_field_type(self, const gchar *id)
    {
        return g_key_file_get_integer(self->_priv->data, KEYFILE_FIELD_TYPES,id, NULL);
    }
    /* Be carefull with this */
    public 
    void 
    set_field_type(self, const gchar *id, FieldType type)
    {
        g_key_file_set_integer(self->_priv->data, KEYFILE_FIELD_TYPES,id,type);
        self_schema_field_changed(self,id);
        self->_priv->changed = TRUE;
    }






    public
    gchar *
    get_field_name(self, const gchar *id)
    {
        return g_key_file_get_string(self->_priv->data, KEYFILE_FIELD_NAMES,id, NULL);
    }

    public
    void
    set_field_name(self, const gchar *id, const gchar *name)
    {
        g_key_file_set_string(self->_priv->data, KEYFILE_FIELD_NAMES,id, name);
        self_schema_field_changed(self,id);
        self->_priv->changed = TRUE;

    }
    /* Field editing */
    public
    void
    add_field(self, FieldType field, const gchar *name)
    {
        gchar *id = g_strdup_printf("%u", (guint)g_random_int());
        g_key_file_set_integer(self->_priv->data, KEYFILE_FIELD_TYPES,id, field); 
        g_key_file_set_string(self->_priv->data, KEYFILE_FIELD_NAMES,id, name); 

        /* Mark it for saving */
        self->_priv->changed = TRUE;

        self_schema_field_added(self, id);
        g_free(id);
    }
    public
    void
    remove_field(self, const gchar *id)
    {
        /* Remove the type field */
        g_key_file_remove_key(self->_priv->data, KEYFILE_FIELD_TYPES, id, NULL);
        /* Remove the Name field */
        g_key_file_remove_key(self->_priv->data, KEYFILE_FIELD_NAMES, id, NULL);
        /* Mark it for saving */
        self->_priv->changed = TRUE;
        self_schema_field_removed(self, id);
    }

    /* Item handling */
    public
        int
        num_items(self)
        {
            return g_list_length(self->_priv->items);
        }
    public
        void
        add_item(self, GObject *item)
        {
            self->_priv->items = g_list_append(self->_priv->items, STUFFKEEPER_DATA_ITEM(item));
            self_schema_changed(self);
        }
    public 
        void
        remove_item(self, GObject *item)
        {
            self->_priv->items = g_list_remove(self->_priv->items, STUFFKEEPER_DATA_ITEM(item));
            self_schema_changed(self);
        }
}
