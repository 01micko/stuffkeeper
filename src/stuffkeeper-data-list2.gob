requires 2.0.10

%h{
#include <gtk/gtk.h>
#include <glib/gi18n.h>
#include <gio/gio.h>
#include "misc.h"
#include "stuffkeeper-data-tag.h"
#include "stuffkeeper-data-item.h"
%}

%h{
    typedef struct _FieldRow {
        GtkWidget *hbox;
        GtkWidget *entry, *remove_but, *add_but;
    
    }FieldRow;

%}    

%ph{
#include "stuffkeeper-data-backend.h"
%}


/* top of the file */
%{
static GtkTargetEntry data_list_drag_target[] = 
{
	{ "text/uri-list", 0, 0},
    { "_NETSCAPE_URL", 0,4},
    { "x-url/http", 0,5}
};
%}



class Stuffkeeper:Data:List2 from Gtk:VBox
{
    private StuffkeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private GtkWidget *sw;
    private GtkWidget *tree;
    private GtkWidget *vbox;
    private GtkWidget *import_button;
    private GtkWidget *add_button;
    private GList *list = {NULL};
    private guint changed_entry_timeout = {0};
    private GdkColor writing ;
    private GdkColor base;
    private GdkColor text;

    /* lock signal */
    private gulong signal_backend_locked = {0};




    private
    void
    changed(self, gpointer data)
    {
        if(self->_priv->changed_entry_timeout)
        {
            g_source_remove(self->_priv->changed_entry_timeout);
        }
        if(data)
        {
            gtk_widget_modify_text(GTK_WIDGET(data), GTK_STATE_NORMAL, &(GTK_WIDGET(self)->style->black));
            gtk_widget_modify_base(GTK_WIDGET(data), GTK_STATE_NORMAL, &(self->_priv->writing));

        }
        self->_priv->changed_entry_timeout = g_timeout_add(1000,(GSourceFunc)self_save_changes,self);
    }
    private 
    void
    row_removed(self, GtkWidget *button)
    {
        FieldRow *fr = g_object_get_data(G_OBJECT(button), "object");
        if(fr)
        {
            self->_priv->list = g_list_remove(self->_priv->list, fr);
            self_free_row(fr, NULL);
            self_changed(self, NULL);
        }
    }

    private
    void
    free_row(FieldRow *row, GObject *obj)
    {
        gtk_widget_destroy(row->entry);
        gtk_widget_destroy(row->remove_but);
        gtk_widget_destroy(row->hbox);
        g_free(row);
    }

    private 
    FieldRow *
    new_row(self, const char *text,int pos)
    {
        FieldRow *fr = g_malloc0(sizeof(*fr));
        fr->hbox = gtk_hbox_new(FALSE, 0);
        fr->entry = gtk_entry_new();
        if(!g_key_file_get_boolean(config_file, "interface", "has-border",NULL))
            gtk_entry_set_has_frame(GTK_ENTRY(fr->entry), FALSE);
        gtk_entry_set_text(GTK_ENTRY(fr->entry), text);
        gtk_box_pack_start(GTK_BOX(fr->hbox), fr->entry, TRUE, TRUE, 0);

        /* remove button */
        fr->remove_but = gtk_button_new();
        gtk_widget_set_no_show_all(fr->remove_but, TRUE);
        gtk_button_set_image(GTK_BUTTON(fr->remove_but), gtk_image_new_from_stock(GTK_STOCK_REMOVE, GTK_ICON_SIZE_MENU));
        gtk_button_set_relief(GTK_BUTTON(fr->remove_but), GTK_RELIEF_NONE);
        gtk_box_pack_start(GTK_BOX(fr->hbox), fr->remove_but, FALSE, TRUE, 0);
        g_object_set_data(G_OBJECT(fr->remove_but), "object", fr);
        g_signal_connect_swapped(G_OBJECT(fr->remove_but), "clicked", G_CALLBACK(self_row_removed), self);
        gtk_widget_show(fr->remove_but);

        /* add button */
        fr->add_but = gtk_button_new();
        gtk_widget_set_no_show_all(fr->add_but, TRUE);
        gtk_button_set_image(GTK_BUTTON(fr->add_but), gtk_image_new_from_stock(GTK_STOCK_ADD, GTK_ICON_SIZE_MENU));
        gtk_button_set_relief(GTK_BUTTON(fr->add_but), GTK_RELIEF_NONE);
        gtk_box_pack_start(GTK_BOX(fr->hbox), fr->add_but, FALSE, TRUE, 0);
        g_object_set_data(G_OBJECT(fr->add_but), "object", fr);
        g_signal_connect_swapped(G_OBJECT(fr->add_but), "clicked", G_CALLBACK(self_row_activate), self);
        gtk_widget_show(fr->add_but);


        
        g_signal_connect_swapped(G_OBJECT(fr->entry), "activate", G_CALLBACK(self_row_activate), self);

        g_object_set_data(G_OBJECT(fr->entry), "object", fr);

        g_signal_connect_swapped(G_OBJECT(fr->entry), "changed", G_CALLBACK(self_changed), self);
        gtk_box_pack_start(GTK_BOX(self->_priv->vbox), fr->hbox, FALSE, TRUE, 0);
        gtk_widget_show_all(fr->hbox);
        if(pos >= 0)
        {
            self->_priv->list = g_list_insert(self->_priv->list, fr, pos+1);
            printf("item: %i:%i\n", pos+1, g_list_index(self->_priv->list, fr));
            gtk_box_reorder_child(GTK_BOX(self->_priv->vbox), fr->hbox,pos+1); 
        }
        else
        {
            self->_priv->list = g_list_append(self->_priv->list, fr);
        }
        return fr;
    }

    private
    gboolean
    grab_focus(GtkWidget *entry)
    {
        gtk_widget_grab_focus(entry);
        return FALSE;
    }
    private
    void
    row_activate(self, GtkEntry *entry)
    {
        if(stuffkeeper_data_backend_get_locked(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item))) == FALSE)
        {

            FieldRow *fr = g_object_get_data(G_OBJECT(entry), "object");
            if(fr)
            {
                int pos = g_list_index(g_list_first(self->_priv->list), fr);
                if(pos+1 == g_list_length(self->_priv->list))
                {
                    printf("appending\n");
                    pos = -1;
                }
                fr = self_new_row(self,"",pos);
                g_idle_add((GSourceFunc)self_grab_focus, fr->entry);
                printf("pos: %i\n", pos);
                self_changed(self, NULL);
            }
        }
    }

    public
    void
    item_changed(self,const gchar *field, Stuffkeeper:Data:Item *item)
    {
        gsize length =0;
        gchar **value;
        if(field && self->_priv->field && strcmp(field, self->_priv->field) == 0)
        {
            g_list_foreach(self->_priv->list, (GFunc)self_free_row, self);
            g_list_free(self->_priv->list);
            self->_priv->list = NULL;

            value = stuffkeeper_data_item_get_list(item, self->_priv->field, &length);
            if(value)
            {
                /* todo */ 
                int i;
                for(i=0;i<length;i++)
                {
                    self_new_row(self,value[i],-1);
                }            
                g_strfreev(value);
            }
        }
    }
    public
    gboolean 
    save_changes(self)
    {
        GList *node = NULL;
        int rows=0;
        gchar **retv=NULL;
        int i=0;
        g_signal_handler_block(self->_priv->item,self->_priv->changed_item_entry);
        rows = g_list_length(self->_priv->list);
        if(rows > 0)
        {
            retv =  g_malloc0((rows+1)*sizeof(gchar *));
            for(node = g_list_first(self->_priv->list); node;node = g_list_next(node))
            {
                FieldRow *fr = node->data;
                const char *value = gtk_entry_get_text(GTK_ENTRY(fr->entry));
                gtk_widget_modify_text(GTK_WIDGET(fr->entry), GTK_STATE_NORMAL, &(self->_priv->text));
                gtk_widget_modify_base(GTK_WIDGET(fr->entry), GTK_STATE_NORMAL, &(self->_priv->base));
                retv[i] = g_strdup(value);
                i++;
            }
        }
        printf("saving changes: %i\n",rows);
        stuffkeeper_data_item_set_list(self->_priv->item, self->_priv->field,(const gchar **) retv, rows);
        if(retv)
            g_strfreev(retv);
        g_signal_handler_unblock(self->_priv->item,self->_priv->changed_item_entry);
        self->_priv->changed_entry_timeout = 0;
        return FALSE;
    }
    private
    void
    add_row(self)
    {
        FieldRow *fr = self_new_row(self,"",-1);
        g_idle_add((GSourceFunc)self_grab_focus, fr->entry);
        self_save_changes(self);
    }
 

    private
    void
    import(self)
    {
        GtkWidget *dialog = gtk_file_chooser_dialog_new(
                "Open text file",
                NULL,
                GTK_FILE_CHOOSER_ACTION_OPEN,
                GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
                _("Open"), GTK_RESPONSE_OK,
                NULL);

        switch(gtk_dialog_run(GTK_DIALOG(dialog)))
        {

            case GTK_RESPONSE_OK:
            {       
                gchar *filename = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
                if(filename)
                {
                    /* Test if the file exists */
                    if(g_file_test(filename, G_FILE_TEST_EXISTS))
                    {
                        GError *error = NULL;
                        gchar *content = NULL;
                        gsize size=0;
                        g_file_get_contents(filename, &content, &size, &error);
                        if(!error)
                        {
                            if(g_utf8_validate(content, size, NULL))
                            {
                                gchar **splitted = g_strsplit(content, "\n", 0);
                                int i=0;

                                for(i=0;splitted && splitted[i];i++)
                                {
                                    if(splitted[i][0] != '\0')
                                    {
                                        self_new_row(self, splitted[i], -1);
                                    }
                                }
                                g_strfreev(splitted);
                                self_save_changes(self);
                            }
                        }else{
                            printf("Failed to load file: '%s' because of '%s'\n", filename, error->message);
                            g_error_free(error);
                            error = NULL;
                        }
                        if(content)
                            g_free(content);
                    }
                    g_free(filename);
                }
                break;
            }
            default:
                break;
        }
        gtk_widget_destroy(dialog);
    }

    private 
    void
    style_set(self, GtkStyle *prev, GtkWidget *wid)
    {
        if(self->_priv->changed_entry_timeout == 0) {
            self->_priv->base = (GTK_WIDGET(self)->style->base[GTK_STATE_NORMAL]);
            self->_priv->text = (GTK_WIDGET(self)->style->text[GTK_STATE_NORMAL]);
        }
    }


    private
    void
    backend_locked(self, GParamSpec *arg1, StuffkeeperDataBackend *backend)
    {
        GList *node;
        gboolean locked = stuffkeeper_data_backend_get_locked(backend);
        if(locked)
        {
            gtk_widget_hide(self->_priv->import_button);
            gtk_widget_hide(self->_priv->add_button);
        }
        else
        {
            gtk_widget_show(self->_priv->import_button);
            gtk_widget_show(self->_priv->add_button);
        }
        for(node = g_list_first(self->_priv->list); node;node = g_list_next(node))
        {
            FieldRow *test = node->data;
            if(locked)
            {
                gtk_widget_hide(test->remove_but);
                gtk_widget_hide(test->add_but);
                gtk_editable_set_editable(GTK_EDITABLE(test->entry), FALSE);
            }
            else
            {
                gtk_widget_show(test->remove_but);
                gtk_widget_show(test->add_but);
                gtk_editable_set_editable(GTK_EDITABLE(test->entry), TRUE);
            }
        }
    }


    public
    GtkWidget *
    new(StuffkeeperDataItem *item,const gchar *field)
    {
        Self *obj = GET_NEW;
        GtkWidget *hbox = gtk_hbox_new(FALSE,6);

        GtkWidget *button;

        obj->_priv->base = (GTK_WIDGET(obj)->style->base[GTK_STATE_NORMAL]);
        obj->_priv->text = (GTK_WIDGET(obj)->style->text[GTK_STATE_NORMAL]);

        obj->_priv->writing.red = 255*255;
        obj->_priv->writing.green = 253*255;
        obj->_priv->writing.blue = 197*255;
        gdk_colormap_alloc_color(gtk_widget_get_default_colormap(), &(obj->_priv->writing), TRUE,TRUE);
        g_signal_connect_swapped(G_OBJECT(obj), "style-set", G_CALLBACK(self_style_set),obj);

        obj->_priv->vbox = gtk_vbox_new(TRUE, 6);

        gtk_box_pack_start(GTK_BOX(obj),obj->_priv->vbox, FALSE, TRUE,0);
        
        /* store item */
        obj->_priv->item = item; 
        obj->_priv->field = g_strdup(field);


        self_item_changed(obj, field, item);
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->item), "item-changed", G_CALLBACK(self_item_changed), obj);


        /**
         * Buttons 
         */
        /* import */
        obj->_priv->import_button = button = gtk_button_new_with_label(_("Import"));
        gtk_widget_set_no_show_all(obj->_priv->import_button, TRUE);

        gtk_button_set_image(GTK_BUTTON(button), gtk_image_new_from_stock(GTK_STOCK_OPEN, GTK_ICON_SIZE_BUTTON));
        gtk_button_set_relief(GTK_BUTTON(button), GTK_RELIEF_NONE);
        gtk_box_pack_end(GTK_BOX(hbox), button, FALSE, TRUE, 0);
        g_signal_connect_swapped(G_OBJECT(button), "clicked", G_CALLBACK(self_import), obj);

        /* Add */
        obj->_priv->add_button = button = gtk_button_new_from_stock(GTK_STOCK_ADD);          
        gtk_widget_set_no_show_all(obj->_priv->add_button, TRUE);
        gtk_button_set_relief(GTK_BUTTON(button), GTK_RELIEF_NONE);
        gtk_box_pack_end(GTK_BOX(hbox), button, FALSE, TRUE, 0);
        g_signal_connect_swapped(G_OBJECT(button), "clicked", G_CALLBACK(self_add_row), obj);


        gtk_box_pack_start(GTK_BOX(obj),hbox, FALSE, TRUE,0);

        gtk_drag_dest_set(GTK_WIDGET(obj),
                GTK_DEST_DEFAULT_ALL,
                data_list_drag_target, 3,
                GDK_ACTION_COPY|GDK_ACTION_LINK|GDK_ACTION_DEFAULT|GDK_ACTION_MOVE);
        g_signal_connect_swapped (G_OBJECT (obj),"drag-data-received",
                GTK_SIGNAL_FUNC (self_drag_data_recieved),obj);

        obj->_priv->signal_backend_locked = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_backend(item)), 
                                                                     "notify::locked", G_CALLBACK(self_backend_locked), obj);
        self_backend_locked(obj,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));

        return GTK_WIDGET(obj);
    }
  
    override (G:Object)
        void
        dispose (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->signal_backend_locked) {                                                                     
                g_signal_handler_disconnect(G_OBJECT(stuffkeeper_data_item_get_backend(self->_priv->item)), self->_priv->signal_backend_locked);
                self->_priv->signal_backend_locked = 0;
            }
            if(self->_priv->changed_entry_timeout)
            {
                g_source_remove(self->_priv->changed_entry_timeout);
                self->_priv->changed_entry_timeout = 0;

                self_save_changes(self);
            }
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }

            if(self->_priv->list)
            {
                g_list_foreach(self->_priv->list, (GFunc)g_free, NULL);
                g_list_free(self->_priv->list);
                self->_priv->list = NULL;
            }

            PARENT_HANDLER(obj);
        }
    private 
        void 
        drag_data_recieved (self,
                GdkDragContext     *context,
                gint                x,
                gint                y,
                GtkSelectionData   *data,
                guint               info,
                guint               time,
                GtkWidget          *widget
                )
        {
            if(!stuffkeeper_data_backend_get_locked(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item))))
            {
                GtkWidget *dialog; 

                gchar **url = NULL;
                GFile *file = NULL;

                if(info == 4){
                    /* if it is from netscape do manual parsing */
                    url = g_uri_list_extract_uris((char *)data->data);
                } else {
                    url =  gtk_selection_data_get_uris(data);   
                }

                if(url == NULL)
                    return;
                printf("%s\n", url[0]);
                file = g_file_new_for_uri(url[0]);

                if(g_file_query_exists(file,NULL))
                {
                    gchar *content;
                    gsize length;

                    if(g_file_load_contents(file, NULL, &content, &length, NULL, NULL))
                    {
                        if(g_utf8_validate(content, length, NULL))
                        {
                            gchar **splitted = g_strsplit(content, "\n", 0);
                            int i=0;

                            for(i=0;splitted && splitted[i];i++)
                            {
                                if(splitted[i][0] != '\0')
                                {
                                    self_new_row(self, splitted[i], -1);
                                }
                            }
                            g_strfreev(splitted);
                            self_save_changes(self);
                            gtk_drag_finish(context, TRUE, FALSE, time);
                            return;
                        }
                        g_object_unref(file);
                    }
                }
                g_object_unref(file);


                /* Failed to open, show a popup */
                gtk_drag_finish(context, TRUE, FALSE, time);
                dialog = gtk_message_dialog_new_with_markup(
                        NULL, 
                        GTK_DIALOG_DESTROY_WITH_PARENT,
                        GTK_MESSAGE_WARNING,
                        GTK_BUTTONS_CLOSE,
                        _("Failed to open:\n<i>'%s'</i>.\nMake sure it is a valid text file."),url[0]);           
                gtk_dialog_run(GTK_DIALOG(dialog));
                gtk_widget_destroy(dialog);
                /* free uris */
                g_strfreev(url);
            }
            else
                gtk_drag_finish(context, FALSE, FALSE, time);
        }
}
