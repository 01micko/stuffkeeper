%h{
#include <gtk/gtk.h>
#include "misc.h"
#include "stuffkeeper-data-item.h"
%}

%ph{
#include "stuffkeeper-data-backend.h"
%}

%{
#define		PRIVATE_FIELD_DEFAULT 0

%}

class Stuffkeeper:Data:Entry:Config from Gtk:HBox
{
		private GtkWidget *entry = {NULL};
    private StuffkeeperDataSchema *schema = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_custom_field = {0};
    private gulong changed_entry = {0};

    private guint changed_entry_timeout = {0};
    private GdkColor writing ;
    private GdkColor base;
    private GdkColor text;

    /* lock signal */
    private gulong signal_backend_locked = {0};

    private
    gboolean  
    save_changes(self)
    {
        const gchar *text = gtk_entry_get_text(GTK_ENTRY(self->_priv->entry));
       
				stuffkeeper_data_schema_set_custom_field_string(self->_priv->schema,self->_priv->field,PRIVATE_FIELD_DEFAULT,text); 

        gtk_widget_modify_text(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(self->_priv->text));
        gtk_widget_modify_base(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(self->_priv->base));
        self->_priv->changed_entry_timeout = 0;
        return FALSE;
    }



    private
    void
    changed(self, gpointer data)
    {
        if(self->_priv->changed_entry_timeout)
        {
            g_source_remove(self->_priv->changed_entry_timeout);
        }
        self->_priv->changed_entry_timeout = g_timeout_add(1000,(GSourceFunc)self_save_changes,self);

        gtk_widget_modify_text(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(GTK_WIDGET(self)->style->black));
        gtk_widget_modify_base(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(self->_priv->writing));
    }
    private
    void
    item_changed(self,const gchar *id, int field, StuffkeeperDataSchema *schema)
    {
        const gchar *text = gtk_entry_get_text(GTK_ENTRY(self->_priv->entry));
        gchar *value = NULL;
				if(field != PRIVATE_FIELD_DEFAULT)
						return;
				value = stuffkeeper_data_schema_get_custom_field_string(schema, self->_priv->field,field); 
        if(value)
        {
            if(strcmp(text,value))
            {
                g_signal_handler_block(self->_priv->entry,self->_priv->changed_entry);
                gtk_entry_set_text(GTK_ENTRY(self->_priv->entry), value);
                g_signal_handler_unblock(self->_priv->entry,self->_priv->changed_entry);
            }
            g_free(value);
        }
    }
    private 
        void
    style_set(self, GtkStyle *prev, GtkWidget *wid)
    {
        if(self->_priv->changed_entry_timeout == 0) {
            self->_priv->base = (GTK_WIDGET(self)->style->base[GTK_STATE_NORMAL]);
            self->_priv->text = (GTK_WIDGET(self)->style->text[GTK_STATE_NORMAL]);
        }
    }

    public
    GtkWidget *
    new(StuffkeeperDataSchema *schema, const gchar *field (check null))
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;
				GtkWidget *label = gtk_label_new(_("Default value:"));

				obj->_priv->text = (GTK_WIDGET(obj)->style->text[GTK_STATE_NORMAL]);
        obj->_priv->writing.red = 255*255;
        obj->_priv->writing.green = 253*255;
        obj->_priv->writing.blue = 197*255;
        gdk_colormap_alloc_color(gtk_widget_get_default_colormap(), &(obj->_priv->writing), TRUE,TRUE);
        g_signal_connect_swapped(G_OBJECT(obj), "style-set", G_CALLBACK(self_style_set),obj);


				
        /* store item */
        obj->_priv->schema = schema; 
        /* field */
        obj->_priv->field = g_strdup(field);
				obj->_priv->entry = gtk_entry_new();
            
				gtk_misc_set_alignment(GTK_MISC(label), 0.0, 0.5);
				gtk_box_pack_start(GTK_BOX(obj), label, FALSE, TRUE,0);
					gtk_box_pack_start(GTK_BOX(obj), obj->_priv->entry, TRUE, TRUE,0);

        obj->_priv->changed_custom_field = g_signal_connect_swapped(G_OBJECT(obj->_priv->schema), 
						"schema_custom_field_changed", G_CALLBACK(self_item_changed), obj);

				value = stuffkeeper_data_schema_get_custom_field_string(schema, obj->_priv->field,PRIVATE_FIELD_DEFAULT); 
				/* update the entry */
				if(value)
				{
            gtk_entry_set_text(GTK_ENTRY(obj->_priv->entry), value);
            g_free(value);
        }

        /* this is destroyed when self is destroyed, so no need to disconnect myself */
        obj->_priv->changed_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->entry), "changed", G_CALLBACK(self_changed), obj);
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        dispose(G:Object *obj)
        {
            Self *self = SELF(obj);

            if(self->_priv->changed_custom_field)
            {
                g_signal_handler_disconnect(self->_priv->schema,self->_priv->changed_custom_field);
                self->_priv->changed_custom_field = 0;
            }

           if(self->_priv->changed_entry_timeout)
            {
                g_source_remove(self->_priv->changed_entry_timeout);
                self->_priv->changed_entry_timeout = 0;

                self_save_changes(self);
            }


            PARENT_HANDLER(obj);
        }
}
