

%h{
#include <gtk/gtk.h>
#include <config.h>
#include <gpgme.h>
#include "misc.h"
#include "stuffkeeper-data-item.h"
%}

%ph{
#include "stuffkeeper-data-backend.h"
%}

%{
	enum {
		PRIVATE_FIELD_GPGKEY = 0
	};

%}

class Stuffkeeper:Data:Password from Gtk:HBox
{
	private GtkWidget *entry = {NULL};
	private GtkWidget *button = {NULL};
	private GtkWidget *butimg = {NULL};

	private StuffkeeperDataItem *item = {NULL};
	private gchar *field = {NULL} destroywith g_free;
	private gulong changed_item_entry = {0};
	private gulong changed_entry = {0};
	private gulong custom_field_changed = {0};

	private guint changed_entry_timeout = {0};
	private GdkColor writing ;
	private GdkColor base;
	private GdkColor text;

	/* lock signal */
	private gulong signal_backend_locked = {0};
	
	/* Encryption stuff */
	private gpgme_ctx_t ctx = NULL;
	private gpgme_key_t keys[2];

	private gboolean unlocked = FALSE;


	private
		gboolean  
		save_changes(self)
		{
			if(self_has_key(self))
			{
				const gchar *text = gtk_entry_get_text(GTK_ENTRY(self->_priv->entry));
				if(self->_priv->field)
				{
					gpgme_data_t dh_plain = 0, dh_cipher = 0;
					gpgme_error_t err;
					gpgme_data_new_from_mem(&dh_plain,text, strlen(text), 0);
					gpgme_data_new(&dh_cipher);
					err = gpgme_op_encrypt(self->_priv->ctx, 
							&(self->_priv->keys[0]),
							GPGME_ENCRYPT_ALWAYS_TRUST,
							dh_plain,
							dh_cipher);
					if(!err)
					{
						size_t nRead = 0;
						gchar *cipher = NULL;
						cipher = gpgme_data_release_and_get_mem(dh_cipher, &nRead);
						gchar *temp = g_malloc0((nRead+2)*sizeof(gchar *));
						memcpy(temp, cipher, nRead);
						g_signal_handler_block(self->_priv->item,self->_priv->changed_item_entry);
						stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field, temp);
						g_signal_handler_unblock(self->_priv->item,self->_priv->changed_item_entry);
						g_free(temp);
						gpgme_free(cipher);
					}else {
						self_set_lock(self, FALSE);
					}
				
					gpgme_data_release(dh_plain);
				}
			}
			gtk_widget_modify_text(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(self->_priv->text));
			gtk_widget_modify_base(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(self->_priv->base));
			self->_priv->changed_entry_timeout = 0;
			return FALSE;
		}



	private
		void
		changed(self, gpointer data)
		{
			if(self->_priv->changed_entry_timeout)
			{
				g_source_remove(self->_priv->changed_entry_timeout);
			}
			self->_priv->changed_entry_timeout = g_timeout_add(1000,(GSourceFunc)self_save_changes,self);

			gtk_widget_modify_text(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(GTK_WIDGET(self)->style->black));
			gtk_widget_modify_base(GTK_WIDGET(self->_priv->entry), GTK_STATE_NORMAL, &(self->_priv->writing));
		}

	private
		void
		item_changed(self,const gchar *field, StuffkeeperDataItem *item)
		{
			const gchar *text = gtk_entry_get_text(GTK_ENTRY(self->_priv->entry));
			gchar *value = NULL;
			if(self->_priv->field && field && self_has_key(self))
			{
				if(strcmp(field, self->_priv->field) == 0)
				{
					value = stuffkeeper_data_item_get_string(item, self->_priv->field);
					if(value && strcmp(text,value))
					{
						g_signal_handler_block(self->_priv->entry,self->_priv->changed_entry);
						gpgme_data_t dh_plain = 0, dh_cipher = 0;
						gpgme_error_t err;
						gpgme_data_new_from_mem(&dh_cipher,value, strlen(value), 0);
						gpgme_data_new(&dh_plain);
						err = gpgme_op_decrypt(self->_priv->ctx, dh_cipher,dh_plain);
						if(!err)
						{
							size_t nRead = 0;
							gchar *plain= NULL;
							plain = gpgme_data_release_and_get_mem(dh_plain, &nRead);
							gchar *temp = g_malloc0((nRead+2)*sizeof(gchar *));
							memcpy(temp, plain, nRead);
							gtk_entry_set_text(GTK_ENTRY(self->_priv->entry), temp);
							g_free(temp);
							gpgme_free(plain);
						}else{
							g_debug("Error decrypting: %s. Locking entry\n", gpgme_strerror(err));
							self_set_lock(self, FALSE);
						}
						gpgme_data_release(dh_cipher);
//						gtk_entry_set_text(GTK_ENTRY(self), value);
						g_signal_handler_unblock(self->_priv->entry,self->_priv->changed_entry);
					}
					g_free(value);
				}
			}
		}
	private 
		void
		style_set(self, GtkStyle *prev, GtkWidget *wid)
		{
			if(self->_priv->changed_entry_timeout == 0) {
				self->_priv->base = (GTK_WIDGET(self)->style->base[GTK_STATE_NORMAL]);
				self->_priv->text = (GTK_WIDGET(self)->style->text[GTK_STATE_NORMAL]);
			}
		}
	private
		void
		backend_locked(self, GParamSpec *arg1, StuffkeeperDataBackend *backend)
		{
			gboolean locked = stuffkeeper_data_backend_get_locked(backend);
			if(self_has_key(self))
				gtk_editable_set_editable(GTK_EDITABLE(self->_priv->entry), !locked);
			else
				gtk_editable_set_editable(GTK_EDITABLE(self->_priv->entry), FALSE);
		}
	private void
	custom_field_changed(self, const gchar *id, int field, StuffkeeperDataSchema *schema)
	{
		if(field == PRIVATE_FIELD_GPGKEY)
		{
			gpgme_error_t err;
			gchar  *value = NULL;
			/* safe pending changes */
			if(self->_priv->changed_entry_timeout)
			{
				g_source_remove(self->_priv->changed_entry_timeout);
				self->_priv->changed_entry_timeout = 0;

				self_save_changes(self);
			}
			self->_priv->unlocked = FALSE;
			/* clear */

			g_signal_handler_block(self->_priv->entry,self->_priv->changed_entry);
			gtk_entry_set_text(GTK_ENTRY(self->_priv->entry), "**********");
			g_signal_handler_unblock(self->_priv->entry,self->_priv->changed_entry);
			/** destroy key */
			if(self->_priv->keys[0])
			{
				gpgme_key_unref(self->_priv->keys[0]);
				self->_priv->keys[0]= 0;
			}
			value = stuffkeeper_data_schema_get_custom_field_string(schema, self->_priv->field,field); 
			if(value)
			{
				err = gpgme_get_key(self->_priv->ctx, value, &(self->_priv->keys[0]), 1);
				if(err){
					g_debug("getting key: %s\n", gpgme_strerror(err));
					gtk_widget_set_sensitive(self->_priv->button,FALSE);
				}else {
					gtk_widget_set_sensitive(self->_priv->button,TRUE);
				}
				g_free(value);
			}

			self_backend_locked(self,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
		}
	}

	public
		GtkWidget *
		new(StuffkeeperDataItem *item, const gchar *field (check null))
		{
			Self *obj = GET_NEW;
			gchar *value =NULL;
			gpgme_error_t err;

			obj->_priv->entry = gtk_entry_new();
			gtk_entry_set_text(GTK_ENTRY(obj->_priv->entry), "**********");
			gtk_box_pack_start(GTK_BOX(obj), obj->_priv->entry,TRUE,TRUE,0);

			obj->_priv->button = gtk_button_new();
			gtk_button_set_relief(GTK_BUTTON(obj->_priv->button), GTK_RELIEF_NONE);
			gtk_box_pack_start(GTK_BOX(obj), obj->_priv->button,FALSE,FALSE,0);
			obj->_priv->butimg = gtk_image_new_from_stock(GTK_STOCK_DIALOG_AUTHENTICATION, GTK_ICON_SIZE_MENU);
			gtk_container_add(GTK_CONTAINER(obj->_priv->button), GTK_WIDGET(obj->_priv->butimg));

			if(!g_key_file_get_boolean(config_file, "interface", "has-border",NULL))
				gtk_entry_set_has_frame(GTK_ENTRY(obj->_priv->entry), FALSE);

			obj->_priv->base = (GTK_WIDGET(obj)->style->base[GTK_STATE_NORMAL]);
			obj->_priv->text = (GTK_WIDGET(obj)->style->text[GTK_STATE_NORMAL]);
			obj->_priv->writing.red = 255*255;
			obj->_priv->writing.green = 253*255;
			obj->_priv->writing.blue = 197*255;
			gdk_colormap_alloc_color(gtk_widget_get_default_colormap(), &(obj->_priv->writing), TRUE,TRUE);
			g_signal_connect_swapped(G_OBJECT(obj), "style-set", G_CALLBACK(self_style_set),obj);


			/* store item */
			obj->_priv->item = item; 
			/* field */
			obj->_priv->field = g_strdup(field);
			
			/* Setup the encryption stuff */
			obj->_priv->keys[0] = 0;
			obj->_priv->keys[1] = 0;
			err = gpgme_new(&(obj->_priv->ctx));
			if(err){
				g_debug("Failed to create gpgme context: %i:%s\n",
						err,
						gpgme_strerror(err));
			}
			gpgme_set_armor((obj->_priv->ctx), 1);
			/* setup key */
			value = stuffkeeper_data_schema_get_custom_field_string(stuffkeeper_data_item_get_schema(item), obj->_priv->field,PRIVATE_FIELD_GPGKEY); 
			if(value){

				err = gpgme_get_key(obj->_priv->ctx, value, &(obj->_priv->keys[0]), 1);


				if(err){
					g_debug("getting key: %s\n", gpgme_strerror(err));
					gtk_widget_set_sensitive(obj->_priv->button,FALSE);
				}
				g_free(value);
			}

			obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);
	

			obj->_priv->signal_backend_locked = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_backend(item)), 
					"notify::locked", G_CALLBACK(self_backend_locked), obj);

			gtk_widget_show_all(GTK_WIDGET(obj));
			self_backend_locked(obj,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));

			/* this is destroyed when self is destroyed, so no need to disconnect myself */
			obj->_priv->changed_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->entry), "changed", G_CALLBACK(self_changed), obj);


			if(self_has_key(obj))
			{/*
				gtk_editable_set_editable(GTK_EDITABLE(obj->_priv->entry), FALSE);
			}else {*/
				self_item_changed(obj, obj->_priv->field, obj->_priv->item);
			}
			g_signal_connect_swapped(G_OBJECT(obj->_priv->button), "clicked", G_CALLBACK(self_unlock_clicked), obj);			

			obj->_priv->custom_field_changed = g_signal_connect_swapped(stuffkeeper_data_item_get_schema(obj->_priv->item), 
					"schema_custom_field_changed", G_CALLBACK(self_custom_field_changed), obj);
			return GTK_WIDGET(obj);
		}

	override (G:Object)
		void
		dispose (G:Object *obj)
		{
			Self *self = SELF(obj);
			if(self->_priv->signal_backend_locked) {                                                                     
				g_signal_handler_disconnect(G_OBJECT(stuffkeeper_data_item_get_backend(self->_priv->item)), self->_priv->signal_backend_locked);
				self->_priv->signal_backend_locked = 0;
			}
			if(self->_priv->changed_item_entry)
			{
				g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
				self->_priv->changed_item_entry = 0;
			}
			if(self->_priv->changed_entry_timeout)
			{
				g_source_remove(self->_priv->changed_entry_timeout);
				self->_priv->changed_entry_timeout = 0;

				self_save_changes(self);
			}
			if(self->_priv->custom_field_changed)
			{
				g_signal_handler_disconnect(stuffkeeper_data_item_get_schema(self->_priv->item),self->_priv->custom_field_changed);
				self->_priv->custom_field_changed = 0;
			}



			/* clear encryption context */
			if(self->_priv->ctx)
			{
				gpgme_release(self->_priv->ctx);
				self->_priv->ctx = NULL;
			}
			/* clear key */
			if(self->_priv->keys[0])
			{
				gpgme_key_unref(self->_priv->keys[0]);
				self->_priv->keys[0]= 0;
			}
			PARENT_HANDLER(obj);
		}

	private 
	void
	unlock_clicked(self, GtkWidget *button)
	{
		g_debug("%s activate\n", __FUNCTION__);
		self_set_lock(self, !self->_priv->unlocked);
	}
	private
	void
	set_lock(self, gboolean lock)
	{	
		g_debug("Unlock/Lock key\n");
		if(self->_priv->keys[0]== 0) return;

		if(lock && !self->_priv->unlocked)
		{
			g_debug("UnLock key\n");
			self->_priv->unlocked = TRUE;
			g_signal_handler_block(self->_priv->entry,self->_priv->changed_entry);
			gtk_entry_set_text(GTK_ENTRY(self->_priv->entry), "");
			g_signal_handler_unblock(self->_priv->entry,self->_priv->changed_entry);
			self_backend_locked(self,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
			self_item_changed(self, self->_priv->field, self->_priv->item);
		}else if (!lock && self->_priv->unlocked){
			g_debug("Lock key\n");
			/* safe pending changes */
			if(self->_priv->changed_entry_timeout)
			{
				g_source_remove(self->_priv->changed_entry_timeout);
				self->_priv->changed_entry_timeout = 0;

				self_save_changes(self);
			}
			self->_priv->unlocked = FALSE;
			/* clear */

			g_signal_handler_block(self->_priv->entry,self->_priv->changed_entry);
			gtk_entry_set_text(GTK_ENTRY(self->_priv->entry), "**********");
			g_signal_handler_unblock(self->_priv->entry,self->_priv->changed_entry);
			self_backend_locked(self,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
		}
	}

	private
	gboolean
	has_key(self)
	{
		return ((self->_priv->keys[0] != 0) && self->_priv->unlocked);
	}

}
