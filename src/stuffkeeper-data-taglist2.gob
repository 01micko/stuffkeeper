requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "stuffkeeper-data-backend.h"
#include "stuffkeeper-data-item.h"
#include "stuffkeeper-data-tag.h"
#include "stuffkeeper-data-label.h"
#include <math.h>
%}

%ph{
#include "stuffkeeper-data-backend.h"
    typedef enum _LPColumnType{
        LP_ID, 
        LP_TITLE,
        LP_SELECTED,
        LP_ITEM,
        LP_AMOUNT,
        LP_NUM_ROWS
    } LPColumnType;
%}

class Stuffkeeper:Data:TagList2 from Gtk:Event:Box
{
    private StuffkeeperDataItem *item = {NULL};
    private StuffkeeperDataBackend *skdb = {NULL};

    private gulong uid_item_changed = {0};
    private gulong uid_tag_added = {0};
    private gulong uid_tag_removed = {0};

    /* Vbox, used to pack tags */
    private GtkWidget *hbox = {NULL};
    /* button for adding tags */
    private GtkWidget *add_button = {NULL};
    private GtkWidget *remove_button = {NULL};


    private GtkWidget *ac_entry = {NULL};
    private GtkEntryCompletion *ac_entry_completion = {NULL};
    private GtkTreeModel *model_tags = {NULL};


    /* item */
    private gulong signal_tag_added = {0};
    private gulong signal_tag_changed = {0};
    private gulong signal_tag_removed = {0};

    /* lock signal */
    private gulong signal_backend_locked = {0};
   
    private 
    void
    tag_button_press(self, GdkEventButton *event,GtkWidget *event_box)
    {
        if(stuffkeeper_data_backend_get_locked(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item))))
            return;
       if(event->button==3)
       {
            StuffkeeperDataTag *tag = g_object_get_data(G_OBJECT(event_box), "tag");
            if(tag)
            {
                stuffkeeper_data_item_remove_tag(self->_priv->item, tag);
            }
        }
    }
    


    /* list of widgets so we can easily clear it */
    private GList *tagsw = {NULL} destroywith g_list_free;
    private
    void
    reload_list(self)
    {
        GList *tags, *iter; 

        if(self->_priv->tagsw) {
            g_list_foreach(self->_priv->tagsw,(GFunc)gtk_widget_destroy, NULL);
            g_list_free(self->_priv->tagsw);
            self->_priv->tagsw = NULL;
        }

        tags = stuffkeeper_data_item_get_tags(self->_priv->item);
        tags = g_list_sort(tags, (GCompareFunc)self_tag_sort_func);
        if(tags)
        {
            for(iter = g_list_first(tags);iter;iter = g_list_next(iter))
            {
                StuffkeeperDataTag *tag = iter->data;
                GtkWidget *event_box = gtk_event_box_new();
                GtkWidget *label = stuffkeeper_data_label_new_tag(tag);
                gtk_widget_modify_fg(GTK_WIDGET(label), GTK_STATE_NORMAL, &(GTK_WIDGET(self)->style->black));
                gtk_container_add(GTK_CONTAINER(event_box), label);
                self->_priv->tagsw = g_list_prepend(self->_priv->tagsw, event_box);
           
                g_signal_connect_swapped(G_OBJECT(event_box), "button-press-event", G_CALLBACK(self_tag_button_press), self);
                gtk_event_box_set_visible_window(GTK_EVENT_BOX(event_box), FALSE);
                gtk_box_pack_start(GTK_BOX(self->_priv->hbox), event_box, FALSE, TRUE, 0);

                g_object_set_data(G_OBJECT(event_box), "tag", tag);
                if(iter->next)
                {
                    label = gtk_label_new(",");
                    self->_priv->tagsw = g_list_prepend(self->_priv->tagsw, label);
                    gtk_box_pack_start(GTK_BOX(self->_priv->hbox), label, FALSE, TRUE, 0);
                }
            }

            g_list_free(tags);
        }
        gtk_widget_show_all(GTK_WIDGET(self));
    }



    private 
    void
    item_changed(self, StuffkeeperDataItem *item)
    {
        self_reload_list(self);
        self_tag_entry_changed(self, NULL);
    }
    /**
     * Utility
     */
    private 
        int 
    tag_sort_func(StuffkeeperDataTag *ta, StuffkeeperDataTag *tb)
    {
        int retv = 0;
        
        gchar *aa, *bb;
        gchar *ca,*cb;

        aa = stuffkeeper_data_tag_get_title(ta);
        bb = stuffkeeper_data_tag_get_title(tb);

        ca = g_utf8_casefold(aa, -1);
        cb = g_utf8_casefold(bb,-1);
        retv = g_utf8_collate(ca,cb);

        g_free(ca);
        g_free(cb);

        g_free(aa);
        g_free(bb);

        return retv;
    }

    /**
     * Remove tag button handling 
     */
    private
    void
    remove_tag(self, GtkMenuItem *item)
    {
        StuffkeeperDataTag *tag = g_object_get_data(G_OBJECT(item), "tag");
        if(tag)
        {
            /* if the item does not allready have the tag, add it */
            if(stuffkeeper_data_item_has_tag(self->_priv->item, tag))
            {
                stuffkeeper_data_item_remove_tag(self->_priv->item, tag);
            }
        }
    }

    private
    void
    remove_button_clicked(self, GtkWidget *button)
    {
        GList *iter,*list = stuffkeeper_data_item_get_tags(self->_priv->item);
        list = g_list_sort(list, (GCompareFunc)self_tag_sort_func);
        if(list)
        {
            GtkWidget*menu = gtk_menu_new();
            for(iter = g_list_first(list); iter; iter = g_list_next(iter))
            {
                StuffkeeperDataTag *tag = STUFFKEEPER_DATA_TAG(iter->data);
                gchar *title = stuffkeeper_data_tag_get_title(tag);
                GtkWidget *item = gtk_menu_item_new_with_label(title);
                /* add to menu */
                gtk_menu_shell_append(GTK_MENU_SHELL(menu), item);

                /* attach the tag to the menu item, and connect click signal */
                g_object_set_data(G_OBJECT(item), "tag", tag);
                g_signal_connect_swapped(G_OBJECT(item),"activate",G_CALLBACK(self_remove_tag), self);
                /* free title */
                g_free(title);
            }

            g_list_free(list);
            gtk_widget_show_all(menu);
            gtk_menu_popup(GTK_MENU(menu), NULL, NULL, NULL, NULL,0,gtk_get_current_event_time());
        }

    }

    /**
     * Add tag button handling 
     */
    private
    void
    add_tag(self, GtkMenuItem *item)
    {
        StuffkeeperDataTag *tag = g_object_get_data(G_OBJECT(item), "tag");
        if(tag)
        {
            /* if the item does not allready have the tag, add it */
            if(!stuffkeeper_data_item_has_tag(self->_priv->item, tag))
            {
                stuffkeeper_data_item_add_tag(self->_priv->item, tag);
            }
        }
    }

    private
    void
    add_button_clicked(self, GtkWidget *button)
    {
        GList *iter,*list = stuffkeeper_data_backend_get_tags(self->_priv->skdb);
        list = g_list_sort(list, (GCompareFunc)self_tag_sort_func);
        if(list)
        {
            GtkWidget*menu = gtk_menu_new();
            for(iter = g_list_first(list); iter; iter = g_list_next(iter))
            {
                StuffkeeperDataTag *tag = STUFFKEEPER_DATA_TAG(iter->data);
                /* only add it to the menu if the item does not have the tag allready */
                if(!stuffkeeper_data_item_has_tag(self->_priv->item, tag))
                {
                    gchar *title = stuffkeeper_data_tag_get_title(tag);
                    GtkWidget *item = gtk_menu_item_new_with_label(title);
                    /* add to menu */
                    gtk_menu_shell_append(GTK_MENU_SHELL(menu), item);
                    
                    /* attach the tag to the menu item, and connect click signal */
                    g_object_set_data(G_OBJECT(item), "tag", tag);
                    g_signal_connect_swapped(G_OBJECT(item),"activate",G_CALLBACK(self_add_tag), self);
                    /* free title */
                    g_free(title);
                }
            }

            g_list_free(list);
            gtk_widget_show_all(menu);
            gtk_menu_popup(GTK_MENU(menu), NULL, NULL, NULL, NULL,0,gtk_get_current_event_time());
        }

    }
    private
    void
    backend_locked(self, GParamSpec *arg1, StuffkeeperDataBackend *backend)
    {
        gboolean locked = stuffkeeper_data_backend_get_locked(backend);
        if(locked)
        {
            gtk_widget_hide(self->_priv->add_button);
            gtk_widget_hide(self->_priv->remove_button);
            gtk_widget_hide(self->_priv->ac_entry);
        }else{
            gtk_widget_show(self->_priv->add_button);
            gtk_widget_show(self->_priv->remove_button);
            gtk_widget_show(self->_priv->ac_entry);
        }
    }

    public
    GtkWidget *
    new(StuffkeeperDataItem *item)
    {
        Self *obj = GET_NEW;
        GList *node,*iter;


        /* store item */
        obj->_priv->skdb = STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item));
        obj->_priv->item = item; 

        gtk_event_box_set_visible_window(GTK_EVENT_BOX(obj), FALSE);
        //        g_signal_connect(G_OBJECT(obj), "style-set", G_CALLBACK(self_style_set), obj);
        /* hbox */
        obj->_priv->hbox = gtk_hbox_new(FALSE, 0);
        /* Add hbox to even box */
        gtk_container_add(GTK_CONTAINER(obj), obj->_priv->hbox);

        /* Add button */
        obj->_priv->add_button = gtk_button_new();
        gtk_button_set_relief(GTK_BUTTON(obj->_priv->add_button), GTK_RELIEF_NONE);
        gtk_button_set_image(GTK_BUTTON(obj->_priv->add_button), gtk_image_new_from_stock(GTK_STOCK_ADD, GTK_ICON_SIZE_MENU));
        gtk_box_pack_end(GTK_BOX(obj->_priv->hbox), obj->_priv->add_button, FALSE, TRUE, 0);

        g_signal_connect_swapped(G_OBJECT(obj->_priv->add_button), "clicked", G_CALLBACK(self_add_button_clicked), obj);
        gtk_widget_set_no_show_all(obj->_priv->add_button, TRUE);





        /* Remove button */
        obj->_priv->remove_button = gtk_button_new();
        gtk_button_set_relief(GTK_BUTTON(obj->_priv->remove_button), GTK_RELIEF_NONE);
        gtk_button_set_image(GTK_BUTTON(obj->_priv->remove_button), gtk_image_new_from_stock(GTK_STOCK_REMOVE, GTK_ICON_SIZE_MENU));
        gtk_box_pack_end(GTK_BOX(obj->_priv->hbox), obj->_priv->remove_button, FALSE, TRUE, 0);

        g_signal_connect_swapped(G_OBJECT(obj->_priv->remove_button), "clicked", G_CALLBACK(self_remove_button_clicked), obj);
        gtk_widget_set_no_show_all(obj->_priv->remove_button, TRUE);


        /* Add an entry box for quick adding/removing creation of tags*/
        /* The entry box can autocomplete existing tags */
        obj->_priv->ac_entry = gtk_entry_new();
        gtk_widget_set_tooltip_text(GTK_WIDGET(obj->_priv->ac_entry),
            _("Quick adding, removing and creating of tags"));

        obj->_priv->ac_entry_completion= gtk_entry_completion_new();
        /* Create tag model, code is copied from Stuffkeeper.Interface */
        obj->_priv->model_tags = (GtkTreeModel *)gtk_list_store_new(5, 
                G_TYPE_INT,
                G_TYPE_STRING,
                G_TYPE_BOOLEAN,
                G_TYPE_POINTER,
                G_TYPE_INT);
        /* Make it inline complete and select the completion. */
        gtk_entry_completion_set_inline_selection(GTK_ENTRY_COMPLETION(obj->_priv->ac_entry_completion),
                TRUE);
        gtk_entry_completion_set_inline_completion(GTK_ENTRY_COMPLETION(obj->_priv->ac_entry_completion),
                TRUE);

        /* Set the icon to be non-clickable, it is only indication of what is going to happen  */
        gtk_entry_set_icon_sensitive(GTK_ENTRY(obj->_priv->ac_entry), GTK_ENTRY_ICON_SECONDARY, FALSE);
        /* Set the completion model */
        gtk_entry_completion_set_model(GTK_ENTRY_COMPLETION(obj->_priv->ac_entry_completion),
                GTK_TREE_MODEL(obj->_priv->model_tags));
        /* Set the colum it should complete against. (it should complete the title */
        gtk_entry_completion_set_text_column(GTK_ENTRY_COMPLETION(obj->_priv->ac_entry_completion),
                LP_TITLE);

        /* Set the completion on the entry  */
        gtk_entry_set_completion(GTK_ENTRY(obj->_priv->ac_entry), 
                obj->_priv->ac_entry_completion);

        /* Add the entry to the view */
        gtk_box_pack_end(GTK_BOX(obj->_priv->hbox), obj->_priv->ac_entry, FALSE, TRUE, 0);

        /* only explicitely show/hide the entry (needed for db locking */
        gtk_widget_set_no_show_all(obj->_priv->ac_entry, TRUE);

        /* Initial loading of the tags */
        node = stuffkeeper_data_backend_get_tags(obj->_priv->skdb);
        for(iter = node;iter;iter = g_list_next(iter))
        {
            self_tag_added(obj->_priv->skdb, iter->data,obj->_priv->model_tags);
        }
        if(node) g_list_free(node);

        /* Catch enter, activation on the entry */
        g_signal_connect_swapped(G_OBJECT(obj->_priv->ac_entry), 
                "activate",
                G_CALLBACK(self_tag_entry_activated), 
                obj);
        /* react if the entry changes */
        g_signal_connect_swapped(G_OBJECT(obj->_priv->ac_entry),
                "changed",
                G_CALLBACK(self_tag_entry_changed),
                obj);
        /* Catch changes on the tags, and update the completion list*/
        obj->_priv->signal_tag_added = g_signal_connect(G_OBJECT(obj->_priv->skdb),
                "tag-added",
                G_CALLBACK(self_tag_added),
                obj->_priv->model_tags);
        obj->_priv->signal_tag_changed = g_signal_connect(G_OBJECT(obj->_priv->skdb),
                "tag-changed",
                G_CALLBACK(self_tag_changed),
                obj->_priv->model_tags);
        obj->_priv->signal_tag_removed = g_signal_connect(G_OBJECT(obj->_priv->skdb),
                "tag-removed",
                G_CALLBACK(self_tag_removed),
                obj->_priv->model_tags);


        self_reload_list(obj);


        obj->_priv->uid_item_changed = g_signal_connect_swapped(G_OBJECT(obj->_priv->item), "item-tags-changed",G_CALLBACK(self_item_changed), obj);

        obj->_priv->signal_backend_locked = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_backend(item)), 
                                                                     "notify::locked", G_CALLBACK(self_backend_locked), obj);
        self_backend_locked(obj,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));

        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->signal_tag_added) { 
                g_signal_handler_disconnect(G_OBJECT(self->_priv->skdb), self->_priv->signal_tag_added);
                self->_priv->signal_tag_added = 0;
            }
            if(self->_priv->signal_tag_changed) { 
                g_signal_handler_disconnect(G_OBJECT(self->_priv->skdb), self->_priv->signal_tag_changed);
                self->_priv->signal_tag_changed = 0;
            }
            if(self->_priv->signal_tag_removed) { 
                g_signal_handler_disconnect(G_OBJECT(self->_priv->skdb), self->_priv->signal_tag_removed);
                self->_priv->signal_tag_removed = 0;
            }
            if(self->_priv->signal_backend_locked) {                                                                     
                g_signal_handler_disconnect(G_OBJECT(stuffkeeper_data_item_get_backend(self->_priv->item)), self->_priv->signal_backend_locked);
                self->_priv->signal_backend_locked = 0;
            }
            if(self->_priv->uid_item_changed)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->uid_item_changed);
                self->_priv->uid_item_changed= 0;
            }
            PARENT_HANDLER(obj);
        }

    /**
     * Keep Tag's GtkListStore up2date
     */
    private
    void 
    tag_added(StuffkeeperDataBackend *skdb, StuffkeeperDataTag *tag, GtkTreeModel *store)
    {
        GtkTreeIter iter;
        gchar *title = stuffkeeper_data_tag_get_title(tag);
        gtk_list_store_insert_with_values(GTK_LIST_STORE(store), &iter, -1,
                    LP_ID, stuffkeeper_data_tag_get_id(tag),
                    LP_TITLE,title,
                    LP_ITEM,tag, 
                    LP_AMOUNT, stuffkeeper_data_tag_num_items(tag),
                    -1);
        g_free(title);
    }
    private
    void 
    tag_changed(StuffkeeperDataBackend *skdb, StuffkeeperDataTag *tag, GtkTreeModel *store)
    {
        GtkTreeIter iter;
        GtkTreeModel *model = GTK_TREE_MODEL(store);
        gint id = stuffkeeper_data_tag_get_id(tag);
        if(gtk_tree_model_get_iter_first(model, &iter))
        {
            do{
                gint oid;
                gtk_tree_model_get(model, &iter, LP_ID, &oid, -1);
                if(oid == id)
                {
                    gchar *title = stuffkeeper_data_tag_get_title(tag);
                    gtk_list_store_set(GTK_LIST_STORE(store), &iter, 
                            LP_TITLE,title, 
                            LP_AMOUNT, stuffkeeper_data_tag_num_items(tag),
                            -1);
                    g_free(title);
                    return;
                }
            }while(gtk_tree_model_iter_next(model, &iter));
        }
    }
    private
    void 
    tag_removed(StuffkeeperDataBackend *skdb, gint id, GtkListStore *store)
    {
        GtkTreeIter iter;
        GtkTreeModel *model = GTK_TREE_MODEL(store);
        if(gtk_tree_model_get_iter_first(model, &iter))
        {
            do{
                gint oid;
                gtk_tree_model_get(model, &iter, LP_ID, &oid, -1);
                if(oid == id)
                {
                    gtk_list_store_remove(store, &iter);
                    return;
                }
            }while(gtk_tree_model_iter_next(model, &iter));
        }
    }

    /**
     * Do the action on activate  
     * If tag exists, add it. 
     * If tag exists and item is allready tagged by it, remove it from item. 
     * If tag does not exists, ask user to create it, then add it.
     */
    private
    void
    tag_entry_activated(self, GObject *obj)
    {
        const gchar * test = gtk_entry_get_text(GTK_ENTRY(self->_priv->ac_entry));
        if(test != NULL && strlen(test) > 0) {
            StuffkeeperDataTag *tag = stuffkeeper_data_backend_find_tag(
                    self->_priv->skdb, test); 
            if(tag) {
                /* if the item does not allready have the tag, add it */
                if(!stuffkeeper_data_item_has_tag(self->_priv->item, tag))
                {
                    stuffkeeper_data_item_add_tag(self->_priv->item, tag);
                }else {
                    stuffkeeper_data_item_remove_tag(self->_priv->item, tag);
                }
            }else {
                GtkDialog * dialog = gtk_message_dialog_new_with_markup(NULL,
                        GTK_DIALOG_DESTROY_WITH_PARENT,
                        GTK_MESSAGE_INFO,
                        GTK_BUTTONS_OK_CANCEL,
                        _("Add tag with name: <i>%s</i>?"),
                        test);
                switch(gtk_dialog_run(dialog))
                {
                    case GTK_RESPONSE_OK:
                        {
                            StuffkeeperDataTag *tag = stuffkeeper_data_backend_new_tag(self->_priv->skdb);
                            stuffkeeper_data_tag_set_title(tag, test);
                            stuffkeeper_data_item_add_tag(self->_priv->item, tag);
                        }
                    default:
                        gtk_widget_destroy(dialog);
                        break;
                }
            }
        } 
        self_tag_entry_changed(self, obj);
    }


    /**
     * update the action icon in the entry box
     * If tag is going to be added to the item, show add icon.
     * If tag is going to be  removed show remove icon.
     * If tag does not exists, show new icon 
     * If nothing entered, show nothing */
    private
    void
    tag_entry_changed(self, GObject *obj)
    {
        const gchar * test = gtk_entry_get_text(GTK_ENTRY(self->_priv->ac_entry));
        if(test != NULL && strlen(test) > 0) {
            StuffkeeperDataTag *tag = stuffkeeper_data_backend_find_tag(
                    self->_priv->skdb, test); 
            if(tag) {
                /* if the item does not allready have the tag, add it */
                if(!stuffkeeper_data_item_has_tag(self->_priv->item, tag))
                {
                gtk_entry_set_icon_from_stock(GTK_ENTRY(self->_priv->ac_entry),
                    GTK_ENTRY_ICON_SECONDARY,
                    GTK_STOCK_ADD);
                }else {
                    gtk_entry_set_icon_from_stock(GTK_ENTRY(self->_priv->ac_entry),
                            GTK_ENTRY_ICON_SECONDARY,
                            GTK_STOCK_REMOVE);
                }
            }else {
                gtk_entry_set_icon_from_stock(GTK_ENTRY(self->_priv->ac_entry),
                    GTK_ENTRY_ICON_SECONDARY,
                    GTK_STOCK_NEW);
            }
        } 
        else{

                gtk_entry_set_icon_from_stock(GTK_ENTRY(self->_priv->ac_entry),
                    GTK_ENTRY_ICON_SECONDARY,
                    NULL);
        }
    }
}
