requires 2.0.10

%h{
#include <config.h>
#include <glib.h>
#include "stuffkeeper-plugin.h"
%}

%h{
#include <gmodule.h>
typedef struct _FS{
    const gchar *name;
    GType       gtype;
    GModule     *module;
    GObject     *object;
    PluginType  plugin_type;
}FS;
%}

%{
typedef GType (*GetType)(void);

%}

class Stuffkeeper:Plugin:Manager from G:Object
{
    private GList *plugins = {NULL}; 


    public
    StuffkeeperPluginManager *
    new(void)
    {
        return GET_NEW;
    }

    public
    GList *
    get_loaded_plugins(self)
    {
        return g_list_copy(self->_priv->plugins);
    }

    override (G:Object)
    void
    finalize(GObject *obj)
    {
        Self *self =SELF(obj);
        if(self->_priv->plugins)
        {
            GList *node;
            for(node = g_list_first(self->_priv->plugins);node;node = g_list_next(node))
            {
                FS *f = node->data;
                g_object_unref(f->object);
                g_module_close(f->module);
                g_free(f);
            }

            self->_priv->plugins = NULL;
        }


    }

    public
    void
    load_plugin(self)
    {
        GDir *dir = g_dir_open(STUFFKEEPER_PLUGIN_DIR,0,NULL); 
        if(dir)
        {
            const gchar *filename;
            printf("Loading plugin: %s\n", STUFFKEEPER_PLUGIN_DIR);
            while((filename = g_dir_read_name(dir)) != NULL)
            {
                if(strncmp(&filename[strlen(filename)-strlen(G_MODULE_SUFFIX)], G_MODULE_SUFFIX,strlen(G_MODULE_SUFFIX)) == 0)
                {
                    gchar *path = g_build_path(G_DIR_SEPARATOR_S, STUFFKEEPER_PLUGIN_DIR, filename, NULL);
                    GModule *module;
                    printf("trying: %s\n", path);
                    module = g_module_open(path, G_MODULE_BIND_LAZY);
                    if(module)
                    {
                        gpointer function;
                        if(g_module_symbol(module,"register_plugin",&(function)))
                        {
                            GetType gt = function;
                            FS *fs = g_malloc0(sizeof(*fs));
                            fs->gtype = gt();
                            fs->module = module;
                            printf("loaded: %i\n", fs->gtype);
                            fs->object = g_object_new(fs->gtype, NULL);
                            /* get type */
                            fs->plugin_type = stuffkeeper_plugin_get_plugin_type(STUFFKEEPER_PLUGIN(fs->object));
                            /* get name */
                            fs->name= stuffkeeper_plugin_get_name(STUFFKEEPER_PLUGIN(fs->object));
                            /* add to list */
                            self->_priv->plugins = g_list_prepend(self->_priv->plugins,fs);
                            printf("Plugin: %s succesfull loaded\n",fs->name);
                        }
                        else
                        {
                            printf("Failed: %s\n", g_module_error());
                            g_module_close(module);
                        }
                    }
                    g_free(path);
                }
            }
            g_dir_close(dir);
        }
    }
 
}
