requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "stuffkeeper-data-item.h"
#include "stuffkeeper-data-backend.h"
%}

%ph{
#include "debug.h"
#include "stuffkeeper-data-backend.h"
#define IMAGE_SIZE 250
%}
/* top of the file */
%{
static GtkTargetEntry data_image_drag_target[] = 
{
    { "image/jpeg", 0, 0 },
    { "image/png",  0, 1 },
    { "image/gif",  0, 2 },
	{ "text/uri-list", 0, 3}
};
%}
class Stuffkeeper:Data:Image from Gtk:Event:Box
{
    private StuffkeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};
    private GtkWidget *image = {NULL};

    public
    void
    changed(self, gpointer data)
    {
    }

    public
    void
    item_changed(self,const gchar *field, StuffkeeperDataItem *item)
    {
        int set = FALSE;
        if(field && self->_priv->field && strcmp(field, self->_priv->field) == 0)
        {
            gchar *value = stuffkeeper_data_item_get_string(item, self->_priv->field);        
            if(value && strlen(value))
            {
                const gchar *path = stuffkeeper_data_backend_get_path(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
                if(path)
                {
                    gchar *fpath = g_build_path(G_DIR_SEPARATOR_S, path, "images", value,NULL); 
                    if(fpath)
                    {
                        GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_scale(fpath, IMAGE_SIZE,IMAGE_SIZE, TRUE, NULL);
                        debug_printf("Trying to load: %s %p\n", fpath,pb);
                        if(pb)
                        {
                            gtk_image_set_from_pixbuf(GTK_IMAGE(self->_priv->image), pb);
                            g_object_unref(pb);
                            set = TRUE;
                        }
                        g_free(fpath);
                    }
                }
                g_free(value);
            }
            if(!set)
                gtk_image_set_from_stock(GTK_IMAGE(self->_priv->image), GTK_STOCK_MISSING_IMAGE, GTK_ICON_SIZE_DIALOG);
        }
    
    }
    private
    void
    copy_path(self, const gchar *original_path)
    {
        const gchar *path = stuffkeeper_data_backend_get_path(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
        if(path)
        {
            gchar *id = g_strdup_printf("%i-%s.jpg", stuffkeeper_data_item_get_id(self->_priv->item), self->_priv->field);
            gchar *fpath = g_build_path(G_DIR_SEPARATOR_S, path, "images",id ,NULL); 

            debug_printf("From '%s' --> '%s'\n", original_path, fpath);
            GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_scale(original_path, IMAGE_SIZE,IMAGE_SIZE, TRUE, NULL);
            debug_printf("%p\n",pb);
            gdk_pixbuf_save(pb, fpath, "jpeg", NULL,"quality","100",NULL);
            g_object_unref(pb);

            /* store it */
            /* clear it first, because else it does not get signald, because the value does not change */
            stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,"");
            stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,id);

            g_free(fpath);
            g_free(id);
        }

    }

    private void 
    button_press_event(self, GdkEventButton *event, gpointer user_data)
    {
        debug_printf("button-press event\n");
        if(stuffkeeper_data_backend_get_locked(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item))))
            return;
        if(event->button == 1)
        {
            GtkWidget *dialog = gtk_file_chooser_dialog_new("Pick an image", 
                        NULL, 
                        GTK_FILE_CHOOSER_ACTION_OPEN,
                        GTK_STOCK_CLEAR, GTK_RESPONSE_NO,
                        GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
                        GTK_STOCK_OPEN, GTK_RESPONSE_OK, 
                        NULL);
            switch(gtk_dialog_run(GTK_DIALOG(dialog)))
            {
                case GTK_RESPONSE_NO:
                    stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,"");
                    break;
                case GTK_RESPONSE_OK:
                    {
                        gchar *file = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
                        if(file)
                        {
                            debug_printf("Saving file: %s\n", file);
                            self_copy_path(self, file);
                            g_free(file);
                        }
                    }
                default:
                    break;
            }
            gtk_widget_destroy(dialog);
        }
        else
        {
            stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,"");
        }
    }

    public
    GtkWidget *
    new(StuffkeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        GtkWidget *alignment = gtk_alignment_new(0, 0, 0,0);
        gchar *value =NULL;

        gtk_event_box_set_visible_window(GTK_EVENT_BOX(obj), FALSE);

        obj->_priv->image = gtk_image_new();
        gtk_image_set_from_stock(GTK_IMAGE(obj->_priv->image), GTK_STOCK_MISSING_IMAGE, GTK_ICON_SIZE_DIALOG);

        
        /* add it to myself */
        gtk_container_add(GTK_CONTAINER(alignment), obj->_priv->image);
        gtk_container_add(GTK_CONTAINER(obj),alignment);

        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the image */
        value = stuffkeeper_data_item_get_string(item, obj->_priv->field);        
        if(value && strlen(value))
        {
            const gchar *path = stuffkeeper_data_backend_get_path(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));
            if(path)
            {

                gchar *fpath = g_build_path(G_DIR_SEPARATOR_S, path, "images", value,NULL); 
                if(fpath)
                {
                    GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_scale(fpath, IMAGE_SIZE,IMAGE_SIZE, TRUE, NULL);
                    if(pb)
                    {
                        gtk_image_set_from_pixbuf(GTK_IMAGE(obj->_priv->image), pb);
                        g_object_unref(pb);
                    }
                    g_free(fpath);
                }
            }
            g_free(value);
        }

        gtk_drag_dest_set(GTK_WIDGET(obj),
                GTK_DEST_DEFAULT_ALL,
                data_image_drag_target, 4,
                GDK_ACTION_COPY|GDK_ACTION_LINK|GDK_ACTION_DEFAULT|GDK_ACTION_MOVE);
        g_signal_connect_swapped (G_OBJECT (obj),"drag-data-received",
                GTK_SIGNAL_FUNC (self_drag_data_recieved),obj);

        /* this is destroyed when self is destroyed, so no need to disconnect myself */
        obj->_priv->changed_entry = g_signal_connect(G_OBJECT(obj), "button-press-event", G_CALLBACK(self_button_press_event), NULL);
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            PARENT_HANDLER(obj);
        }
    private 
        void 
        drag_data_recieved (self,
                GdkDragContext     *context,
                gint                x,
                gint                y,
                GtkSelectionData   *data,
                guint               info,
                guint               time,
                GtkWidget          *widget
                )
        {
            if(!stuffkeeper_data_backend_get_locked(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item))))
            {
                GtkWidget *dialog; 
                gchar **url = gtk_selection_data_get_uris(data);
                /* process url */
                if(strncmp(url[0], "file://",7) == 0)
                {
                    gchar *stripped = g_filename_from_uri(url[0], NULL, NULL); 
                    if(stripped)
                    {
                        GdkPixbufFormat *finfo = gdk_pixbuf_get_file_info(stripped, NULL, NULL);
                        /* if the pixbuf loader can open it, copy it */
                        if(finfo)
                        {
                            self_copy_path(self, &((url[0])[7]));
                            g_strfreev(url);
                            g_free(stripped);
                            gtk_drag_finish(context, TRUE, FALSE, time);
                            return;
                        }
                        g_free(stripped);
                    }
                }
                /* Failed to open, show a popup */
                gtk_drag_finish(context, FALSE, FALSE, time);
                dialog = gtk_message_dialog_new_with_markup(
                                                            NULL, 
                                                            GTK_DIALOG_DESTROY_WITH_PARENT,
                                                            GTK_MESSAGE_WARNING,
                                                            GTK_BUTTONS_CLOSE,
                                                            _("Failed to open:\n<i>'%s'</i>.\nMake sure it is a valid local image."),url[0]);           
                gtk_dialog_run(GTK_DIALOG(dialog));
                gtk_widget_destroy(dialog);
                /* free uris */
                g_strfreev(url);
            }
            else
                gtk_drag_finish(context, FALSE, FALSE, time);
        }
}
