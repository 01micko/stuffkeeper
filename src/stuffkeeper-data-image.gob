requires 2.0.10

%h{
#include <gtk/gtk.h>
#include <gio/gio.h>
#include "stuffkeeper-data-item.h"
#include "stuffkeeper-data-backend.h"
%}

%ph{
#include "debug.h"
#include "misc.h"    
#include "stuffkeeper-data-backend.h"
#define IMAGE_SIZE 250
%}
/* top of the file */
%{
static GtkTargetEntry data_image_drag_target[] = 
{
    { "image/jpeg", 0, 0 },
    { "image/png",  0, 1 },
    { "image/gif",  0, 2 },
	{ "text/uri-list", 0, 3},
    { "_NETSCAPE_URL", 0,4},
    { "x-url/http", 0,5}
};
%}
class Stuffkeeper:Data:Image from Gtk:Event:Box
{
    private StuffkeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_entry = {0};
    private GtkWidget *image = {NULL};
    private GtkWidget *ali = {NULL};
	/* File variables for file-transfer */
	private GCancellable * can = {NULL};
    private GFile *file = {NULL};

    public
    void
    changed(self, gpointer data)
    {
    }

    public
    void
    item_changed(self,const gchar *field, StuffkeeperDataItem *item)
    {
        int set = FALSE;
        if(field && self->_priv->field && strcmp(field, self->_priv->field) == 0)
        {
            gchar *value = stuffkeeper_data_item_get_string(item, self->_priv->field);        
            if(value && strlen(value))
            {
                const gchar *path = stuffkeeper_data_backend_get_path(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
                if(path)
                {
                    gchar *fpath = g_build_path(G_DIR_SEPARATOR_S, path, "images", value,NULL); 
                    if(fpath)
                    {
                        GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_max_size(fpath, IMAGE_SIZE);
                        //gdk_pixbuf_new_from_file_at_scale(fpath, IMAGE_SIZE,IMAGE_SIZE, TRUE, NULL);
                        debug_printf("Trying to load: %s %p\n", fpath,pb);
                        if(pb)
                        {
                            screenshot_add_border(&pb);
                            screenshot_add_shadow(&pb); 
                            gtk_image_set_from_pixbuf(GTK_IMAGE(self->_priv->image), pb);
                            g_object_unref(pb);
                            set = TRUE;
                        }
                        g_free(fpath);
                    }
                }
                g_free(value);
            }
            if(!set)
                gtk_image_set_from_stock(GTK_IMAGE(self->_priv->image), GTK_STOCK_MISSING_IMAGE, GTK_ICON_SIZE_DIALOG);
        }
    
    }
    private
    void
    copy_path(self, const gchar *original_path)
    {
        const gchar *path = stuffkeeper_data_backend_get_path(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
        if(path)
        {
			if(gdk_pixbuf_get_file_info(original_path, NULL,NULL))
			{
				gchar *id = g_strdup_printf("%i-%s.jpg", stuffkeeper_data_item_get_id(self->_priv->item), self->_priv->field);
				gchar *fpath = g_build_path(G_DIR_SEPARATOR_S, path, "images",id ,NULL); 

				debug_printf("From '%s' --> '%s'\n", original_path, fpath);
				GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_max_size(original_path, IMAGE_SIZE);
				debug_printf("%p\n",pb);
				gdk_pixbuf_save(pb, fpath, "jpeg", NULL,"quality","100",NULL);
				g_object_unref(pb);

				/* store it */
				/* clear it first, because else it does not get signald, because the value does not change */
				stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,"");
				stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,id);

				g_free(fpath);
				g_free(id);
			}
			else
			{
				GtkWidget *dialog;
				/* set empty image */
				
				dialog = gtk_message_dialog_new_with_markup(
						NULL, 
                        GTK_DIALOG_DESTROY_WITH_PARENT,
                        GTK_MESSAGE_WARNING,
                        GTK_BUTTONS_CLOSE,
                        _("The chosen file is not a image format supported by gtk."));

                gtk_dialog_run(GTK_DIALOG(dialog));
                gtk_widget_destroy(dialog);
				stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,"");
			}
        }

    }

    private void 
    button_press_event(self, GdkEventButton *event, gpointer user_data)
    {
        debug_printf("button-press event\n");
        if(stuffkeeper_data_backend_get_locked(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item))))
            return;
        if(event->button == 1)
        {
            GtkWidget *dialog = gtk_file_chooser_dialog_new("Pick an image", 
                        NULL, 
                        GTK_FILE_CHOOSER_ACTION_OPEN,
                        GTK_STOCK_CLEAR, GTK_RESPONSE_NO,
                        GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
                        GTK_STOCK_OPEN, GTK_RESPONSE_OK, 
                        NULL);
		file_chooser_enable_image_preview(dialog,IMAGE_SIZE); 
            switch(gtk_dialog_run(GTK_DIALOG(dialog)))
            {
                case GTK_RESPONSE_NO:
                    stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,"");
                    break;
                case GTK_RESPONSE_OK:
                    {
                        gchar *file = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
                        if(file)
                        {
                            debug_printf("Saving file: %s\n", file);
                            self_copy_path(self, file);
                            g_free(file);
                        }
                    }
                default:
                    break;
            }
            gtk_widget_destroy(dialog);
        }
        else
        {
            stuffkeeper_data_item_set_string(self->_priv->item, self->_priv->field,"");
        }
    }

    public
    GtkWidget *
    new(StuffkeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;
        obj->_priv->ali= gtk_alignment_new(0, 0, 0,0);
        gtk_event_box_set_visible_window(GTK_EVENT_BOX(obj), FALSE);

        obj->_priv->image = gtk_image_new();
        gtk_image_set_from_stock(GTK_IMAGE(obj->_priv->image), GTK_STOCK_MISSING_IMAGE, GTK_ICON_SIZE_DIALOG);

        
        /* add it to myself */
        gtk_container_add(GTK_CONTAINER(obj->_priv->ali), obj->_priv->image);
        gtk_container_add(GTK_CONTAINER(obj),obj->_priv->ali);

        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the image */
        value = stuffkeeper_data_item_get_string(item, obj->_priv->field);        
        if(value && strlen(value))
        {
            const gchar *path = stuffkeeper_data_backend_get_path(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));
            if(path)
            {

                gchar *fpath = g_build_path(G_DIR_SEPARATOR_S, path, "images", value,NULL); 
                if(fpath)
                {
                    //GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_scale(fpath, IMAGE_SIZE,IMAGE_SIZE, TRUE, NULL);
                    GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_max_size(fpath, IMAGE_SIZE);
                    if(pb)
                    {
                        screenshot_add_border(&pb);
                        screenshot_add_shadow(&pb); 
                        gtk_image_set_from_pixbuf(GTK_IMAGE(obj->_priv->image), pb);
                        g_object_unref(pb);
                    }
                    g_free(fpath);
                }
            }
            g_free(value);
        }

        gtk_drag_dest_set(GTK_WIDGET(obj),
                GTK_DEST_DEFAULT_ALL,
                data_image_drag_target, 6,
                GDK_ACTION_COPY|GDK_ACTION_LINK|GDK_ACTION_DEFAULT|GDK_ACTION_MOVE);
        g_signal_connect_swapped (G_OBJECT (obj),"drag-data-received",
                GTK_SIGNAL_FUNC (self_drag_data_recieved),obj);

        /* this is destroyed when self is destroyed, so no need to disconnect myself */
        obj->_priv->changed_entry = g_signal_connect(G_OBJECT(obj), "button-press-event", G_CALLBACK(self_button_press_event), NULL);
        return GTK_WIDGET(obj);
    }
    override (G:Object)
    void
    dispose (G:Object *obj)
    {
        Self *self = SELF(obj);
        if(self->_priv->file)
        {
		/* remove reference to self from file, then it knows it should ignore it results.*/
		g_object_set_data(G_OBJECT(self->_priv->file), "im", NULL);
		/* TODO: cancel the file transfer, if possible */
		if(self->_priv->can)
		{
			g_cancellable_cancel(self->_priv->can);
			self->_priv->can = NULL;
		}
        }

        PARENT_HANDLER(obj);
    }
    override (G:Object)
    void
    finalize (G:Object *obj)
	{
		Self *self = SELF(obj);

		if(self->_priv->changed_item_entry)
		{
			g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
			self->_priv->changed_item_entry = 0;
		}
		PARENT_HANDLER(obj);
	}
    private 
    void
    copy_done(GObject *file_data, GAsyncResult *res, gpointer data)
	{
		GFile *file = G_FILE(file_data);
		gpointer s = g_object_get_data(G_OBJECT(file), "im");	
		if(s == NULL)
		{
			g_file_copy_finish(file, res, NULL);
			g_object_unref(file);
			/* free cancel thing */
			return;
		}
		Self *self = SELF(s);

		gtk_widget_destroy(gtk_bin_get_child(GTK_BIN(self->_priv->ali)));
		self->_priv->image = gtk_image_new();
        gtk_image_set_from_stock(GTK_IMAGE(self->_priv->image), GTK_STOCK_MISSING_IMAGE, GTK_ICON_SIZE_DIALOG);

		gtk_container_add(GTK_CONTAINER(self->_priv->ali), self->_priv->image);
		gtk_widget_show_all(GTK_WIDGET(self));


		if(g_file_copy_finish(file, res, NULL))
		{
			GFile *temp;
			const gchar *path = stuffkeeper_data_backend_get_path(
					STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
			gchar *tmp_path = g_build_path(G_DIR_SEPARATOR_S, path, "temp",NULL);
			self_copy_path(self,tmp_path);
			/* delete the temp file */
			temp = g_file_new_for_path(tmp_path);
			g_file_delete(temp,NULL,NULL);
			g_object_unref(temp);
			g_free(tmp_path);
			printf("copy done\n");
		}
		else 
		{
			printf("copy failed\n");
			self_item_changed(self, self->_priv->field, self->_priv->item);
		}
		g_object_unref(file);
		self->_priv->file = NULL;
		self->_priv->can = NULL;
	}
    private 
    void
    copy_progress(goffset cnb, goffset tnb, gpointer data)
	{
		GFile *file = data;
		gpointer s = g_object_get_data(G_OBJECT(file), "im");	
		if(!s)
		{
			return;
		}
		Self *self = SELF(s);
		if(tnb)
			gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(self->_priv->image), (cnb)/(float)tnb);
		else
			gtk_progress_bar_pulse(GTK_PROGRESS_BAR(self->_priv->image));
	}
	private
	void
	cancel_transfer(self, GtkWidget *button)
	{
		/* cancel the transfer */
		if(self->_priv->file && self->_priv->can)
		{
			g_cancellable_cancel(self->_priv->can);
		}
	}


    private 
        void 
        drag_data_recieved (self,
                GdkDragContext     *context,
                gint                x,
                gint                y,
                GtkSelectionData   *data,
                guint               info,
                guint               time,
                GtkWidget          *widget
                )
        {
            if(!stuffkeeper_data_backend_get_locked(STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item))))
            {
                gchar **url = NULL;
                
                if(info == 4){
                    /* if it is from netscape do manual parsing */
                    url = g_uri_list_extract_uris((char *)data->data);
                } else {
                    url =  gtk_selection_data_get_uris(data);   
                }
                if(self->_priv->file)
                    return ;
                if(url == NULL)
                    return;
                printf("%s\n", url[0]);

                self->_priv->file = g_file_new_for_uri(url[0]);
                
				{
					GtkWidget *vbox, *button;
					const gchar *path = stuffkeeper_data_backend_get_path(
							STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->item)));
					gchar *tmp_path = g_build_path(G_DIR_SEPARATOR_S, path, "temp",NULL);
					GFile *dest = g_file_new_for_path(tmp_path);
					printf("%s\n", tmp_path);

					g_object_set_data(G_OBJECT(self->_priv->file), "im", self);
					gtk_widget_destroy(self->_priv->image);

					vbox = gtk_hbox_new(FALSE, 6);
					self->_priv->image = gtk_progress_bar_new();
					gtk_box_pack_start(GTK_BOX(vbox), self->_priv->image, TRUE, TRUE, 0);
					button = gtk_button_new_from_stock(GTK_STOCK_CANCEL);
					gtk_box_pack_start(GTK_BOX(vbox), button, FALSE, FALSE, 0);
					g_signal_connect_swapped(G_OBJECT(button), "clicked", G_CALLBACK(self_cancel_transfer), self);

					gtk_container_add(GTK_CONTAINER(self->_priv->ali),vbox);
					gtk_widget_show_all(GTK_WIDGET(self));

					self->_priv->can = g_cancellable_new();
					g_file_copy_async(self->_priv->file, dest,
							G_FILE_COPY_OVERWRITE, G_PRIORITY_DEFAULT,
							self->_priv->can, self_copy_progress,
							self->_priv->file,
							self_copy_done,
							NULL); 
					g_object_unref(self->_priv->can);
					g_object_unref(dest);
					g_free(tmp_path);
				}


                /* Failed to open, show a popup */
                gtk_drag_finish(context, FALSE, FALSE, time);

                /* free uris */
                g_strfreev(url);
            }
            else
                gtk_drag_finish(context, FALSE, FALSE, time);
        }
}
