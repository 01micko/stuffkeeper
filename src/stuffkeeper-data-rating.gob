requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "stuffkeeper-data-item.h"
%}

class StuffKeeper:Data:Rating from Gtk:HScale
{
    private StuffKeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_spin_value = {0};

    public
    void
    value_changed(self, gpointer data)
    {
        const gint value = (gint)(gtk_range_get_value(GTK_RANGE(self))*10);
        stuffkeeper_data_item_set_integer(self->_priv->item, self->_priv->field, value);
    }

    public
    void
    item_changed(self,const gchar *field, StuffKeeperDataItem *item)
    {
        if(field && self->_priv->field && strcmp(field, self->_priv->field) == 0)
        {
            const int value = (gint)(gtk_range_get_value(GTK_RANGE(self))*10);
            const int new_value = stuffkeeper_data_item_get_integer(item, self->_priv->field);

            if(new_value != value)
            {
                g_signal_handler_block(self,self->_priv->changed_spin_value);
                gtk_range_set_value(GTK_RANGE(self), (gdouble)(new_value/10.0));
                g_signal_handler_unblock(self,self->_priv->changed_spin_value);
            }
        }
    }

    public
    GtkWidget *
    new(StuffKeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;/*_VARG(gtk_adjustment_new(0,G_MININT,G_MAXINT,1,1,1),8);*/
        int value; 

        /* setup */
        gtk_scale_set_value_pos(GTK_SCALE(obj), GTK_POS_RIGHT);
        gtk_range_set_range(GTK_RANGE(obj), 0, 10);
        gtk_range_set_increments(GTK_RANGE(obj),0.1,1);

        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the entry */
        value = stuffkeeper_data_item_get_integer(item, obj->_priv->field);
        gtk_range_set_value(GTK_RANGE(obj), (gdouble)(value/10.0));

        obj->_priv->changed_spin_value = g_signal_connect(G_OBJECT(obj), "value_changed", G_CALLBACK(self_value_changed), NULL);
        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            PARENT_HANDLER(obj);
        }

}
