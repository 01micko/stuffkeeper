requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "stuffkeeper-data-item.h"
%}
%ph{
#include "stuffkeeper-data-backend.h"
%}

%{
typedef enum {
	MIN_RANGE = 0,
	MAX_RANGE = 1,
	DEFAULT_VALUE =2	

}CustomField;

%}
class Stuffkeeper:Data:Rating from Gtk:HScale
{
    private StuffkeeperDataItem *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};
    private gulong changed_spin_value = {0};

		private gulong custom_field_update = {0};
    /* lock signal */
    private gulong signal_backend_locked = {0};

    public
    void
    value_changed(self, gpointer data)
    {
        const gint value = (gint)(gtk_range_get_value(GTK_RANGE(self))*10);
        stuffkeeper_data_item_set_integer(self->_priv->item, self->_priv->field, value);
    }

    public
    void
    item_changed(self,const gchar *field, StuffkeeperDataItem *item)
    {
        if(field && self->_priv->field && strcmp(field, self->_priv->field) == 0)
        {
            const int value = (gint)(gtk_range_get_value(GTK_RANGE(self))*10);
            const int new_value = stuffkeeper_data_item_get_integer(item, self->_priv->field);

            if(new_value != value)
            {
                g_signal_handler_block(self,self->_priv->changed_spin_value);
                gtk_range_set_value(GTK_RANGE(self), (gdouble)(new_value/10.0));
                g_signal_handler_unblock(self,self->_priv->changed_spin_value);
            }
        }
    }


		public
		void
    schema_custom_field_changed(self, const gchar *id, int field, StuffkeeperDataSchema *schema)
		{
			int min_value, max_value;
			if(field == MIN_RANGE || field == MAX_RANGE)
			{
				if(stuffkeeper_data_schema_get_custom_field_integer(stuffkeeper_data_item_get_schema(self->_priv->item),
							self->_priv->field,MIN_RANGE, &min_value))
				{
					if(stuffkeeper_data_schema_get_custom_field_integer(stuffkeeper_data_item_get_schema(self->_priv->item), 
								self->_priv->field,MAX_RANGE, &max_value))
					{
						printf("set range: %i %i\n", min_value, max_value);
						gtk_range_set_range(GTK_RANGE(self), min_value, max_value);
					}
				}
			}
		}


    /* Block scrolling */
    private 
    gboolean
    button_scroll_event(self, GdkEventButton *event, GtkWidget *widget)
    {
        return TRUE;
    }

    private
        void
    backend_locked(self, GParamSpec *arg1, StuffkeeperDataBackend *backend)
    {
        gboolean locked = stuffkeeper_data_backend_get_locked(backend);
        gtk_widget_set_sensitive(GTK_WIDGET(self), !locked);
    }

    public
    GtkWidget *
    new(StuffkeeperDataItem *item, const gchar *field)
    {
        Self *obj = GET_NEW;
        int value, min_value, max_value; 
        g_signal_connect_swapped(obj, "scroll-event", G_CALLBACK(self_button_scroll_event), obj);

        /* setup */
        gtk_scale_set_value_pos(GTK_SCALE(obj), GTK_POS_RIGHT);
        gtk_range_set_range(GTK_RANGE(obj), 0, 10);
        gtk_range_set_increments(GTK_RANGE(obj),0.1,1);
        gtk_range_set_update_policy(GTK_RANGE(obj), GTK_UPDATE_DELAYED);


        /* store item */
        obj->_priv->item = item; 
        /* field */
        obj->_priv->field = g_strdup(field);
            	
	/* get custom values */

	if(stuffkeeper_data_schema_get_custom_field_integer(stuffkeeper_data_item_get_schema(item), obj->_priv->field,MIN_RANGE, &min_value))
	{
		if(stuffkeeper_data_schema_get_custom_field_integer(stuffkeeper_data_item_get_schema(item), obj->_priv->field,MAX_RANGE, &max_value))
		{
			printf("set range: %i %i\n", min_value, max_value);
			gtk_range_set_range(GTK_RANGE(obj), min_value, max_value);
		}
	}

        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the entry */
        value = stuffkeeper_data_item_get_integer(item, obj->_priv->field);
        gtk_range_set_value(GTK_RANGE(obj), (gdouble)(value/10.0));

        obj->_priv->changed_spin_value = g_signal_connect(G_OBJECT(obj), "value_changed", G_CALLBACK(self_value_changed), NULL);

        obj->_priv->signal_backend_locked = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_backend(item)), 
                                                                     "notify::locked", G_CALLBACK(self_backend_locked), obj);

				obj->_priv->custom_field_update = g_signal_connect_swapped(G_OBJECT(stuffkeeper_data_item_get_schema(item)), 
																"schema_custom_field_changed", G_CALLBACK(self_schema_custom_field_changed), obj);


        self_backend_locked(obj,NULL, STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(item)));

        return GTK_WIDGET(obj);
    }

    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->signal_backend_locked) {                                                                     
                g_signal_handler_disconnect(G_OBJECT(stuffkeeper_data_item_get_backend(self->_priv->item)), self->_priv->signal_backend_locked);
                self->_priv->signal_backend_locked = 0;
            }
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            if(self->_priv->custom_field_update)
            {
                g_signal_handler_disconnect(stuffkeeper_data_item_get_schema(self->_priv->item),self->_priv->custom_field_update);
                self->_priv->custom_field_update = 0;
            }





            PARENT_HANDLER(obj);
        }

}
