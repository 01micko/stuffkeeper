requires 2.0.10

%h{
#include <gtk/gtk.h>
#include <time.h>
#include "stuffkeeper-data-tag.h"
#include "stuffkeeper-data-schema.h"
#include "stuffkeeper-data-item.h"
%}


class Stuffkeeper:Data:Label from Gtk:Label
{
    private GObject *item = {NULL};
    private gchar *field = {NULL} destroywith g_free;
    private gulong changed_item_entry = {0};


    private
    void
    field_item_changed(self,const gchar *id, Stuffkeeper:Data:Schema *schema)
    {
        gchar *value;
        value = stuffkeeper_data_schema_get_field_name(STUFFKEEPER_DATA_SCHEMA(self->_priv->item),self->_priv->field);
        if(value)
        {
            gchar *markup = g_markup_printf_escaped("<b>%s</b>", value);
            gtk_label_set_text(GTK_LABEL(self), value);
            gtk_label_set_markup(GTK_LABEL(self), markup);
            g_free(markup);
            g_free(value);
        }
    }


    private
    void
    schema_item_changed(self,GObject *item, gpointer data)
    {
        gchar *value;
        if(STUFFKEEPER_IS_DATA_SCHEMA(self->_priv->item))
        {
            value = stuffkeeper_data_schema_get_title(STUFFKEEPER_DATA_SCHEMA(self->_priv->item));
            if(value)
            {
                gtk_label_set_text(GTK_LABEL(self), value);
                g_free(value);
            }
        }
    }

    private
    void
    tag_item_changed(self, GObject *item, gpointer data)
    {
        gchar *value;
        if (STUFFKEEPER_IS_DATA_TAG(self->_priv->item))
        {
            value = stuffkeeper_data_tag_get_title(STUFFKEEPER_DATA_TAG(self->_priv->item));
            if(value)
            {
                gtk_label_set_text(GTK_LABEL(self), value);
                g_free(value);
            }
        }
    }


    private
    void
    item_changed(self, char *field,GObject *item)
    {
        if (STUFFKEEPER_IS_DATA_ITEM(self->_priv->item))
        {
            time_t time = stuffkeeper_data_item_get_modification_time(STUFFKEEPER_DATA_ITEM(item));
            struct tm *t  = localtime(&time);
            char buffer[256];
            strftime(buffer,256, "%x", t);
            gtk_label_set(GTK_LABEL(self), buffer);
        }
    }



    /**
     * Creates a label that keeps track of the name of a tag.
     */
    public
    GtkWidget *
    new_tag(StuffkeeperDataTag *tag)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;

        gtk_misc_set_alignment(GTK_MISC(obj), 0, 0.5);
        
        /* store item */
        obj->_priv->item = G_OBJECT(tag); 
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->item), "tag-changed", G_CALLBACK(self_tag_item_changed), obj);

        value = stuffkeeper_data_tag_get_title(STUFFKEEPER_DATA_TAG(obj->_priv->item));
        if(value)
        {
            gtk_label_set_text(GTK_LABEL(obj), value);
            g_free(value);
        }
        return GTK_WIDGET(obj);
    }

    /**
     * Creates a label that keeps track of the name of a schema 
     */
    public
    GtkWidget *
    new_schema(StuffkeeperDataSchema *schema)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;

        gtk_misc_set_alignment(GTK_MISC(obj), 0, 0.5);
        
        /* store item */
        obj->_priv->item = G_OBJECT(schema); 

            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->item), "schema-changed", G_CALLBACK(self_schema_item_changed), obj);

        value = stuffkeeper_data_schema_get_title(STUFFKEEPER_DATA_SCHEMA(obj->_priv->item));
        if(value)
        {
            gtk_label_set_text(GTK_LABEL(obj), value);
            g_free(value);
        }
        return GTK_WIDGET(obj);
    }
    
    /**
     * Creates a label that keeps track of the name of a field in a schema 
     */
    public
    GtkWidget *
    new_schema_field(StuffkeeperDataSchema *schema,const gchar *field)
    {
        Self *obj = GET_NEW;
        gchar *value =NULL;

        gtk_misc_set_alignment(GTK_MISC(obj), 0, 0.5);
        
        /* store item */
        obj->_priv->item = G_OBJECT(schema); 

        obj->_priv->field = g_strdup(field); 
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->item), 
                        "schema-field-changed", 
                        G_CALLBACK(self_field_item_changed),
                        obj);

        value = stuffkeeper_data_schema_get_field_name(STUFFKEEPER_DATA_SCHEMA(obj->_priv->item),obj->_priv->field);
        if(value)
        {
            gchar *markup = g_markup_printf_escaped("<b>%s</b>", value);
            gtk_label_set_text(GTK_LABEL(obj), value);
            gtk_label_set_markup(GTK_LABEL(obj), markup);
            g_free(markup);
            g_free(value);
        }
        return GTK_WIDGET(obj);
    }

    /**
     * Creates a label that keeps track of the modification time of a tag 
     */
    public
    GtkWidget *
    new_modifcation_time_item(StuffkeeperDataItem *item)
    {
        Self *obj = GET_NEW;
        gtk_misc_set_alignment(GTK_MISC(obj), 0, 0.5);
        
        /* store item */
        obj->_priv->item = G_OBJECT(item); 
            
        obj->_priv->changed_item_entry = g_signal_connect_swapped(G_OBJECT(obj->_priv->item), "item-changed", G_CALLBACK(self_item_changed), obj);

        /* update the label */
        self_item_changed(obj,NULL, obj->_priv->item);

        return GTK_WIDGET(obj);
    }



    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            Self *self = SELF(obj);
            if(self->_priv->changed_item_entry)
            {
                g_signal_handler_disconnect(self->_priv->item,self->_priv->changed_item_entry);
                self->_priv->changed_item_entry = 0;
            }
            PARENT_HANDLER(obj);
        }

}
