requires 2.0.10

%h{
    #include "stuffkeeper-data-schema.h"
    #include "stuffkeeper-data-item.h"
    #include "stuffkeeper-data-tag.h"
%}
%ph{
#include <sqlite3.h>
#include "debug.h"
    #include <glib/gstdio.h>
    #include <stdio.h>
    #include <string.h>
#define DB_VERSION "0.01"
%}


class StuffKeeper:Data:Backend from G:Object 
{
    /**
     * Private values 
     */
    /* A hash list used to store the items, the item id is the hash key */
    private GHashTable *schemas = {g_hash_table_new_full(g_int_hash, g_int_equal,g_free, g_object_unref)} ;

    /* A hash list used to store the tags, the tags id is the hash key */
    private GHashTable *tags = {g_hash_table_new_full(g_int_hash, g_int_equal,g_free, g_object_unref)} ;

    /* A hash list used to store the items, the item id is the hash key */
    private GHashTable *items = {g_hash_table_new_full(g_int_hash, g_int_equal,g_free, g_object_unref)} ;

    /* The path this "db" resides */
    private gchar *path = {NULL} destroywith g_free;

    /* SQLite handler */
    private sqlite3 *sqlHandle = {NULL};

    /**
     * Signal 
     */
    /* item */
    signal last NONE (STRING,POINTER)
    void
    item_changed(self, const gchar *field,StuffKeeperDataItem *item)
    {
    }

    signal last NONE (POINTER)
    void
    item_added(self, StuffKeeperDataItem *item)
    {
        g_signal_connect_swapped(G_OBJECT(item), "item-changed", G_CALLBACK(self_item_changed), self);

    }
    signal last NONE (INT)
        void
    item_removed(self, gint id)
    {
    }
    /* schema */
    signal last NONE (POINTER)
    void
    schema_changed(self, StuffKeeperDataSchema *schema)
    {
    }

    signal last NONE (POINTER)
    void
    schema_added(self, StuffKeeperDataSchema *schema)
    {
        g_signal_connect_swapped(G_OBJECT(schema), "schema-changed", G_CALLBACK(self_schema_changed), self);
    }
    signal last NONE (INT)
        void
    schema_removed(self, gint id)
    {
    }

    /**
     * Public functions 
     */
    public
        GList *
        get_items(self)
        {
            return g_hash_table_get_values(self->_priv->items);
        }

    public
    guint
    get_num_items(self)
    {
        return g_hash_table_size(self->_priv->items);
    }


    public 
    StuffKeeperDataItem *
    get_item(self, gint id)
    {
        StuffKeeperDataItem *item;
        item = g_hash_table_lookup(self->_priv->items, &id);
        return item;
    }

    public 
    StuffKeeperDataItem *
    new_item(self,StuffKeeperDataSchema *schema)
    {
        gint *id;
        StuffKeeperDataItem *item;
        gchar *path = g_build_path(G_DIR_SEPARATOR_S, self->_priv->path, "items", NULL);
        /* create a new item */
        item = stuffkeeper_data_item_new(G_OBJECT(self),self->_priv->sqlHandle,schema);
        g_free(path);
        /* want to copy the key, even if it is an integer */
        id = g_malloc0(sizeof(gint));
        *id = stuffkeeper_data_item_get_id(item);
        /* insert it into my hash-list */
        g_hash_table_insert(self->_priv->items,id, item);
        self_item_added(self, item);

        return item;
    }

    public 
    void
    remove_item(self, gint id)
    {
        StuffKeeperDataItem *item = g_hash_table_lookup(self->_priv->items, &id);
        self_item_removed(self, id);
        if(item)
        {
            stuffkeeper_data_item_delete_yourself(item); 
        }
        if(g_hash_table_remove(self->_priv->items, &id) == FALSE)
        {
            return;
        }

    }
    public
    void
    close_yourself(self)
    {
        /* Clear items */
        if(self->_priv->items)
        {
            g_hash_table_foreach(self->_priv->items, (GHFunc)self_iterate_remove_item, self);
            g_hash_table_remove_all(self->_priv->items);
        }
        if(self->_priv->tags)
        {
            g_hash_table_foreach(self->_priv->tags, (GHFunc)self_iterate_remove_tag, self);
            g_hash_table_remove_all(self->_priv->tags);
        }
        if(self->_priv->schemas)
        {
            g_hash_table_foreach(self->_priv->schemas, (GHFunc)self_iterate_remove_schema, self);
            g_hash_table_remove_all(self->_priv->schemas);
        }
        /* close the open db */
        if(self->_priv->sqlHandle)
        {
            int retv = sqlite3_close(self->_priv->sqlHandle);
            if(retv != SQLITE_OK)
            {
                printf("The following error occured while trying to close the db: %s\n",
                        sqlite3_errmsg(self->_priv->sqlHandle));
            }
        }
        self->_priv->sqlHandle = NULL;
        g_free(self->_priv->path);
        self->_priv->path = NULL;

    }

    /* Load the data */
    public
    void
    load(self, const gchar *db_path)
    {
        int retv;
        /* item */
        gchar *path;
        char *query;
        sqlite3_stmt *stmt;
        const char *tail;
        int r;





    
        /* check if there is allready data active */
        if(self->_priv->path)
        {
            self_close_yourself(self);
        }

        /**
         * Store the path in the backend.
         */
        self->_priv->path = g_strdup(db_path);

        /**
         * The database
         */
        path = g_build_path(G_DIR_SEPARATOR_S, self->_priv->path,"database.sqlite3",NULL);
        /* open the db */
        retv = sqlite3_open(path, &(self->_priv->sqlHandle));
        if(retv != SQLITE_OK)
        {
            g_error("Failed to open the db: %s because of '%s'", path, sqlite3_errmsg(self->_priv->sqlHandle));
        }
        /* Check the db */
        self_check_sqlite_db(self);
        g_free(path);

        /** image dir */
        path = g_build_path(G_DIR_SEPARATOR_S, self->_priv->path,"images",NULL);
        if(!g_file_test(path, G_FILE_TEST_IS_DIR))
        {
            g_mkdir(path, 0755);
        }
        g_free(path);




        /**
         * Read Schemas 
         */
        query = sqlite3_mprintf("SELECT SchemaId FROM Schemas WHERE type=%i",DB_SCHEMAS_TYPE_ID);
        r = sqlite3_prepare(self->_priv->sqlHandle, query, -1,  &stmt,  &tail);
        sqlite3_free(query);
        if (r != SQLITE_OK)
        {
            printf("Failed: %s\n", sqlite3_errmsg(self->_priv->sqlHandle));
        }
        else
        {
            while((r = sqlite3_step(stmt)) == SQLITE_ROW)
            {
                gint oid = sqlite3_column_int(stmt, 0);
                StuffKeeperDataSchema *schema;
                gint *id;
                /* create a new item */
                schema = stuffkeeper_data_schema_open_from_id(G_OBJECT(self),self->_priv->sqlHandle, oid);
                /* want to copy the key, even if it is an integer */
                id = g_malloc0(sizeof(gint));
                *id = oid; 
                /* insert it into my hash-list */
                g_hash_table_insert(self->_priv->schemas,id,schema);
                self_schema_added(self,schema);
            }
        }
        sqlite3_finalize(stmt);
        /**
         * Read tags 
         */
        query = "SELECT id FROM Tags";
        r = sqlite3_prepare(self->_priv->sqlHandle, query, -1,  &stmt,  &tail);
        if (r != SQLITE_OK)
        {
            printf("Failed: %s\n", sqlite3_errmsg(self->_priv->sqlHandle));
        }
        else
        {
            while((r = sqlite3_step(stmt)) == SQLITE_ROW)
            {
                gint oid = sqlite3_column_int(stmt, 0);
                StuffKeeperDataTag *tag;
                gint *id;
                /* create a new item */
                tag = stuffkeeper_data_tag_open_from_id(self->_priv->sqlHandle, oid);
                /* want to copy the key, even if it is an integer */
                id = g_malloc0(sizeof(gint));
                *id = oid; 
                /* insert it into my hash-list */
                g_hash_table_insert(self->_priv->tags,id, tag);
                self_tag_added(self, tag);
            }
        }
        sqlite3_finalize(stmt);

        /** 
         * Items
         */
        query = sqlite3_mprintf("SELECT ItemId FROM Items WHERE type=%i",DB_ITEMS_TYPE_ID);
        r = sqlite3_prepare(self->_priv->sqlHandle, query, -1,  &stmt,  &tail);
        sqlite3_free(query);
        if (r != SQLITE_OK)
        {
            printf("Failed: %s\n", sqlite3_errmsg(self->_priv->sqlHandle));
        }
        else
        {
            while((r = sqlite3_step(stmt)) == SQLITE_ROW)
            {
                gint oid = sqlite3_column_int(stmt, 0);
                StuffKeeperDataItem *item;
                gint *id;
                /* create a new item */
                item = stuffkeeper_data_item_open_from_id(G_OBJECT(self),self->_priv->sqlHandle, oid);
                /* want to copy the key, even if it is an integer */
                id = g_malloc0(sizeof(gint));
                *id = oid; 
                /* insert it into my hash-list */
                g_hash_table_insert(self->_priv->items,id,item);
                self_item_added(self,item);
            }
        }
        sqlite3_finalize(stmt);
        /* test the items directory */
    }
    
    /**
     * Handle destroying of the object
     */
    private
    void
    iterate_remove_schema(gint *key, StuffKeeperDataSchema *schema, Self *self) 
    {
        self_schema_removed(self, *key);
    }
    private
    void
    iterate_remove_item(gint *key, StuffKeeperDataItem *item, Self *self )
    {
        self_item_removed(self, *key);
    }
    private
    void
    iterate_remove_tag(gint *key, StuffKeeperDataTag *tag, Self *self)
    {
        self_tag_removed(self, *key);
    }



    override (G:Object)
    void
    finalize (G:Object *obj)
    {
        Self *self = SELF(obj);

        if(self->_priv->items)
        {
            g_hash_table_destroy(self->_priv->items);
            self->_priv->items = NULL;
        }
        if(self->_priv->tags)
        {
            g_hash_table_destroy(self->_priv->tags);
            self->_priv->tags = NULL;
        }
        if(self->_priv->schemas)
        {
            g_hash_table_destroy(self->_priv->schemas);
            self->_priv->schemas = NULL;
        }

        /**
         * Clear SQLite table
         */
        if(self->_priv->sqlHandle)
        {
            int retv = sqlite3_close(self->_priv->sqlHandle);
            if(retv != SQLITE_OK)
            {
                printf("The following error occured while trying to close the db: %s\n",
                        sqlite3_errmsg(self->_priv->sqlHandle));
            }
            /* set pointer to NULL */
            self->_priv->sqlHandle = NULL;
        }
        PARENT_HANDLER(obj);
    }


    /**
     * Create new StuffKeeperDataBackend 
     * destroy with g_object_unref();
     */
    public 
    StuffKeeperDataBackend *
    new (void)
    {
        Self *self = GET_NEW;
        return self;
    }


    /**
     * Tags
     */
    /* signals  */
    signal last NONE (POINTER)
    void
    tag_changed(self, StuffKeeperDataTag *tag)
    {
    }

    signal last NONE (POINTER)
        void
        tag_added(self, StuffKeeperDataTag *tag)
        {

            g_signal_connect_swapped(G_OBJECT(tag), "tag-changed", G_CALLBACK(self_tag_changed), self);
        }

    signal last NONE (INT)
    void
    tag_removed(self,const int id)
    {
    }
    
    /**
     * Schema's
     */
    public
    StuffKeeperDataSchema*
    get_schema(self, const int id)
    {
        gint *ide;
        StuffKeeperDataSchema *schema;
        /* Look for existing tag */
        schema = g_hash_table_lookup(self->_priv->schemas, &id);
        if(schema)
        {
            return schema;
        }
        /* No tag, lets make one. */
        schema = stuffkeeper_data_schema_new_with_id(G_OBJECT(self),self->_priv->sqlHandle,id);

        /* Add to the list */
        ide = g_malloc0(sizeof(gint));
        *ide = id;
        g_hash_table_insert(self->_priv->schemas,ide, schema);

        self_schema_added(self, schema);
        return schema;
    }
    public
        GList *
        get_schemas(self)
        {
            return g_hash_table_get_values(self->_priv->schemas);
        }

    public
        StuffKeeperDataSchema *
        new_schema(self)
    {
        gint *ide;
        gint id; 
        StuffKeeperDataSchema *schema;


        /* No schema, lets make one. */
        schema = stuffkeeper_data_schema_new(G_OBJECT(self),self->_priv->sqlHandle);
        id = stuffkeeper_data_schema_get_id(schema);
        /* Add to the list */
        ide = g_malloc0(sizeof(gint));
        *ide = id;
        g_hash_table_insert(self->_priv->schemas,ide, schema);

        self_schema_added(self, schema);
        return schema;
    }
    public
        void
        remove_schema(self, gint id)
        {
            StuffKeeperDataSchema *schema = self_get_schema(self, id);
            if(!schema) return;
            if(stuffkeeper_data_schema_num_items(schema) >0)
            {
                return;
            }
            self_schema_removed(self,id);
            if(schema)
            {
                stuffkeeper_data_schema_delete_yourself(schema); 
            }

            if(g_hash_table_remove(self->_priv->schemas, &id) == FALSE)
            {
                return;
            }
        }

    /**
     * TAGS
     */

   /**
     * Add tag
     * Call this from the item when adding a tag, it will return the tag.
     * Existing tag if it allready exists
     */
    public
    StuffKeeperDataTag *
    add_tag(self, const int id)
    {
        gint *ide;
        StuffKeeperDataTag *tag;
        /* Look for existing tag */
        tag = g_hash_table_lookup(self->_priv->tags, &id);
        if(tag)
        {
            return tag;
        }
        printf("Tag not found, this aint good\n");
        /* No tag, lets make one. */
        tag = stuffkeeper_data_tag_new_with_id(self->_priv->sqlHandle,id);

        /* Add to the list */
        ide = g_malloc0(sizeof(gint));
        *ide = stuffkeeper_data_tag_get_id(tag);
        g_hash_table_insert(self->_priv->tags,ide, tag);

        self_tag_added(self, tag);
        return tag;
    }

    public
        StuffKeeperDataTag *
    get_tag(self, const int id)
    {
        StuffKeeperDataTag *tag;
        /* Look for existing tag */
        tag = g_hash_table_lookup(self->_priv->tags, &id);
        return tag;
    }
    public
    StuffKeeperDataTag *
    new_tag(self)
    {
        gint *ide;
        StuffKeeperDataTag *tag = stuffkeeper_data_tag_new(self->_priv->sqlHandle);
        /* We have a valid id now, so add it */
        /* Add to the list */
        ide = g_malloc0(sizeof(gint));
        *ide = stuffkeeper_data_tag_get_id(tag);
        g_hash_table_insert(self->_priv->tags,ide, tag);
        self_tag_added(self, tag);
        return tag; 
    }

    public
    GList *
    get_tags(self)
    {
        return g_hash_table_get_values(self->_priv->tags);
    }

    public
    void
    remove_tag(self, gint id)
    {
        StuffKeeperDataTag *tag = self_get_tag(self, id);
        if(!tag) return;
        if(stuffkeeper_data_tag_num_items(tag) >0)
        {
            return;
        }
        self_tag_removed(self,id);
        if(tag)
        {
            stuffkeeper_data_tag_delete_yourself(tag); 
        }

        if(g_hash_table_remove(self->_priv->tags, &id) == FALSE)
        {
            return;
        }

    }

    public
    gchar *
    get_path(self)
    {
        return self->_priv->path;
    }

    /**
     * SQLITE 
     */
    /* function checks if all the tables exist */
    private
    void
    check_sqlite_db(self)
    {
        /* available tables */
        gboolean has_general = FALSE;
        gboolean has_tags = FALSE;
        gboolean has_schemas = FALSE;
        gboolean has_schemas_field = FALSE;
        gboolean has_items = FALSE;
        gboolean has_items_field = FALSE;


        int i;
        int result = 0;
        char *error = NULL;
        char **resultp = NULL;
        int rows, columns;
        char *query = NULL;

        /* Check what tables exists */
        query = sqlite3_mprintf("select tbl_name from sqlite_master where type='table'");
        /* execute */
        result = sqlite3_get_table(self->_priv->sqlHandle, query, &resultp, &rows, &columns,&error);
        for (i = 1; i < (rows + 1); i++) {
            /** Check for availible tables */
            if (!strcmp(resultp[i], "General")) {
                has_general = TRUE;
            }
            if (!strcmp(resultp[i], "Tags")) {
                has_tags = TRUE;
            }
            if (!strcmp(resultp[i], "Schemas")) {
                has_schemas = TRUE;
            }
            if (!strcmp(resultp[i], "SchemasFields")) {
                has_schemas_field = TRUE;
            }
            if (!strcmp(resultp[i], "Items")) {
                has_items = TRUE;
            }
            if (!strcmp(resultp[i], "ItemsFields")) {
                has_items_field = TRUE;
            }
        }
        sqlite3_free(query);
        /* if not exists, create the general table */
        if(!has_general) {
            printf("Create general table\n");

            query = sqlite3_mprintf("CREATE TABLE 'General' ("
                    "'id'		INTEGER PRIMARY KEY AUTOINCREMENT," /* not useful, but you want a row id anyway. */
                    "'key'	    TEXT,"  /* the key stored in value */
                    "'value'	TEXT" /* the value */
                    ")");

            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
            /* store db version */
            query = sqlite3_mprintf("INSERT INTO 'General' ('key', 'value') VALUES('%q','%q')","Version", DB_VERSION);
            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
        }
        if(!has_tags) {
            printf("Create Tags table\n");

            query = sqlite3_mprintf("CREATE TABLE 'Tags' ("
                    "'id'		INTEGER PRIMARY KEY AUTOINCREMENT," /* not useful, but you want a row id anyway. */
                    "'mtime'	INTEGER,"  /* the key stored in value */
                    "'name'	    TEXT" /* the value */
                    ")");

            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
        }

        if(!has_schemas) {
            printf("Create Schemas table\n");

            query = sqlite3_mprintf("CREATE TABLE 'Schemas' ("
                    "'id'		INTEGER PRIMARY KEY AUTOINCREMENT," /* not useful, but you want a row id anyway. */
                    "'SchemaId'  INTEGER," /* id of the schema, taken from type=ID */
                    "'type'	    INTEGER,"  /* the key stored in value */
                    "'value'	TEXT" /* the value */
                    ")");

            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
        }
        if(!has_schemas_field) {
            printf("Create SchemasFields table\n");

            query = sqlite3_mprintf("CREATE TABLE 'SchemasFields' ("
                    "'id'		INTEGER PRIMARY KEY AUTOINCREMENT," /* not useful, but you want a row id anyway. */
                    "'FieldId'  INTEGER," /* id of the field, this is taken from the id of type=ID */
                    "'SchemaId' INTEGER," /* Id of the schema this field belongs too */
                    "'type'	    INTEGER,"  /* the key stored in value */
                    "'value'	TEXT" /* the value */
                    ")");

            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
            sqlite3_exec(self->_priv->sqlHandle, "CREATE INDEX SchemaId ON data(SchemaId);", NULL, NULL, NULL);
        }
        if(!has_items) {
            printf("Create Items table\n");

            query = sqlite3_mprintf("CREATE TABLE 'Items' ("
                    "'id'		INTEGER PRIMARY KEY AUTOINCREMENT," /* not useful, but you want a row id anyway. */
                    "'ItemId'  INTEGER," /* id of the item, taken from type=ID */
                    "'type'	    INTEGER,"  /* the key stored in value */
                    "'value'	TEXT" /* the value */
                    ")");

            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
        }
        if(!has_items_field) {
            printf("Create ItemsFields table\n");

            query = sqlite3_mprintf("CREATE TABLE 'ItemsFields' ("
                    "'id'		INTEGER PRIMARY KEY AUTOINCREMENT," /* not useful, but you want a row id anyway. */
                    "'ItemId'   INTEGER," /* id of the field, this is taken from the id of type=ID */
                    "'FieldId'  INTEGER," /* Id of the schema this field belongs too */
                    "'value'	TEXT" /* the value */
                    ")");

            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
            sqlite3_exec(self->_priv->sqlHandle, "CREATE INDEX ItemId ON data(ItemId);", NULL, NULL, NULL);
        }

    }
}
