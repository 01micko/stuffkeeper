requires 2.0.10

%h{
#include <gtk/gtk.h>
    #include "stuffkeeper-data-backend.h"
    #include "stuffkeeper-data-item.h"
    #include "stuffkeeper-data-schema.h"
    #include "stuffkeeper-data-label.h"
    #include "stuffkeeper-data-entry.h"
    #include "stuffkeeper-data-taglist.h"
    #include "stuffkeeper-show-item.h"
%}

class StuffKeeper:Item:Window from Gtk:Dialog
{
    private guint signal_item_removed = {0};
    private StuffKeeperDataItem *item = {NULL};
    private StuffKeeperDataBackend *skdb= {NULL};
    public
        void
        interface_header_changed(GtkWidget *widget, GtkStyle *old, GtkWidget *wid)
        {
            gtk_widget_modify_bg(GTK_WIDGET(wid), GTK_STATE_NORMAL, &(widget->style->bg[GTK_STATE_SELECTED]));
            gtk_widget_modify_fg(GTK_WIDGET(wid), GTK_STATE_NORMAL, &(widget->style->fg[GTK_STATE_SELECTED]));
            gtk_widget_modify_text(GTK_WIDGET(wid), GTK_STATE_NORMAL, &(widget->style->text[GTK_STATE_SELECTED]));
        }

    public
        void
        item_removed(self, gint id, StuffKeeperDataBackend *skdb)
        {
            gint gid = stuffkeeper_data_item_get_id(self->_priv->item);
            printf("%i-%i\n", gid, id);
            if(gid == id)
            {
                printf("destroying\n");
                gtk_dialog_response(GTK_DIALOG(self), GTK_RESPONSE_CLOSE);
            }
        }
        public 
        void
        response(self, int response, gpointer data)
        {
            if(self->_priv->signal_item_removed) { 
                g_signal_handler_disconnect(G_OBJECT(self->_priv->skdb), self->_priv->signal_item_removed);
                self->_priv->signal_item_removed = 0;
            }
            printf("response\n");
            gtk_widget_destroy(GTK_WIDGET(self));
        }

    /**
     * Popup an item list
     */
    public
        void 
        new (StuffKeeper:Data:Backend *skdb, StuffKeeper:Data:Item *item)
        {                                                                                                                                            
            Self *self = GET_NEW;
            GtkWidget *dialog = GTK_WIDGET(self);
            gtk_dialog_add_button(GTK_DIALOG(self), "gtk-close", GTK_RESPONSE_CLOSE);
            gtk_dialog_set_has_separator(GTK_DIALOG(self), FALSE);

            /**/
            GtkWidget *container = gtk_vbox_new(FALSE, 6);
            GtkWidget *sw = NULL; 
            gsize length =0;
            GtkWidget *vbox;
            GtkWidget *label1;
            GtkWidget *event2; 

            self->_priv->item = item;
            self->_priv->skdb = skdb;
            self->_priv->signal_item_removed = g_signal_connect_swapped(G_OBJECT(skdb), "item-removed",
                    G_CALLBACK(self_item_removed), self);


            /* set size */
            gtk_window_set_default_size(GTK_WINDOW(dialog), 500,600);



            gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox), container, TRUE, TRUE, 0);
            gtk_container_set_border_width(GTK_CONTAINER(container), 9);
            /* The title */
            event2 = gtk_event_box_new(); 
            vbox = gtk_hbox_new(FALSE, 6);
            /* Title */
            label1 = gtk_label_new("");
            gtk_label_set_markup(GTK_LABEL(label1), "<b>Title:</b>");
            gtk_misc_set_alignment(GTK_MISC(label1), 1,0.5);
            gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);
            self_interface_header_changed(dialog, NULL, label1);
            g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            

            label1 = stuffkeeper_data_entry_new(item,NULL);
            gtk_box_pack_start(GTK_BOX(vbox),label1, TRUE,TRUE, 0);

            /* type */
            StuffKeeperDataSchema *schema = stuffkeeper_data_item_get_schema(item);
            label1 =gtk_label_new("");
            gtk_label_set_markup(GTK_LABEL(label1), "<b>Type:</b>");
            gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);
            self_interface_header_changed(dialog, NULL, label1);
            g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            

            if(schema) {
                label1 = stuffkeeper_data_label_new_schema(schema);
            } else {
                label1 = gtk_label_new("N/A");
            }


            gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);

            gtk_container_set_border_width(GTK_CONTAINER(vbox), 8);

            self_interface_header_changed(dialog, NULL, event2);
            g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),event2);            
            self_interface_header_changed(dialog, NULL, label1);
            g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            

            gtk_container_add(GTK_CONTAINER(event2), vbox);
            gtk_box_pack_start(GTK_BOX(container),event2, FALSE,TRUE, 0);


            if(stuffkeeper_data_item_get_creation_time(item) > 0)
            {
                label1 = gtk_label_new("");
                time_t time = stuffkeeper_data_item_get_creation_time(item);
                struct tm *t  = localtime(&time);
                char buffer[256];
                strftime(buffer,256, "%c", t);
                gchar *markup = g_markup_printf_escaped("<b>Created:</b> %s", buffer); 
                gtk_misc_set_alignment(GTK_MISC(label1), 0,0.5);
                gtk_label_set_markup(GTK_LABEL(label1), markup);
                g_free(markup);
                gtk_box_pack_start(GTK_BOX(container),label1, FALSE,TRUE, 0);
            }
            if(stuffkeeper_data_item_get_modification_time(item) > 0)
            {
                label1 = gtk_label_new("");
                time_t time = stuffkeeper_data_item_get_modification_time(item);
                struct tm *t  = localtime(&time);
                char buffer[256];
                strftime(buffer,256, "%c", t);
                gchar *markup = g_markup_printf_escaped("<b>Modified:</b> %s", buffer); 
                gtk_misc_set_alignment(GTK_MISC(label1), 0,0.5);
                gtk_label_set_markup(GTK_LABEL(label1), markup);
                g_free(markup);
                gtk_box_pack_start(GTK_BOX(container),label1, FALSE,TRUE, 0);
            }


            label1 = gtk_label_new("");
            gtk_label_set_markup(GTK_LABEL(label1),"<span weight='bold' size='x-large'>Fields:</span>");
            gtk_misc_set_alignment(GTK_MISC(label1), 0,0.5);
            gtk_misc_set_padding(GTK_MISC(label1), 0,8);
            gtk_box_pack_start(GTK_BOX(container),label1, FALSE,TRUE, 0);

            /**
             * Get the attached schema and fill in the rest from there
             */

            /* num fields + one for the tags */
            vbox = stuffkeeper_show_item_new(item);
            gtk_table_set_row_spacings(GTK_TABLE(vbox), 6);
            gtk_table_set_col_spacings(GTK_TABLE(vbox), 6);
            gtk_container_set_border_width(GTK_CONTAINER(vbox), 12);            

            event2 = gtk_event_box_new();
            gtk_widget_modify_bg(event2, GTK_STATE_NORMAL, &((dialog)->style->base[GTK_STATE_NORMAL]));

            sw = gtk_scrolled_window_new(FALSE, FALSE);
            gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(sw), GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);
            gtk_container_add(GTK_CONTAINER(event2), vbox);
            gtk_scrolled_window_add_with_viewport(GTK_SCROLLED_WINDOW(sw), event2);
            gtk_box_pack_start(GTK_BOX(container),sw, TRUE,TRUE, 0);

            /* Title */
            vbox = gtk_hbox_new(FALSE,6);
            label1 = gtk_label_new("");
            gchar *val = g_markup_printf_escaped("<b>%s</b>", "Tags");
            gtk_label_set_markup(GTK_LABEL(label1), val);
            g_free(val);
            gtk_misc_set_alignment(GTK_MISC(label1), 1,0);
            gtk_box_pack_start(GTK_BOX(vbox), label1, FALSE, TRUE, 0);

            label1 = stuffkeeper_data_taglist_new(skdb,item);

            gtk_table_set_row_spacings(GTK_TABLE(label1), 6);
            gtk_table_set_col_spacings(GTK_TABLE(label1), 18);

            gtk_box_pack_start(GTK_BOX(vbox), label1, FALSE, FALSE, 0);


            gtk_box_pack_start(GTK_BOX(container),vbox, FALSE,TRUE, 6);


            g_signal_connect(G_OBJECT(dialog), "response", G_CALLBACK(self_response), NULL);
            gtk_widget_show_all(dialog);
        }
}
