requires 2.0.10

%h{
#include <gtk/gtk.h>
#include "debug.h"
    #include "stuffkeeper-data-backend.h"
    #include "stuffkeeper-data-item.h"
    #include "stuffkeeper-data-schema.h"
    #include "stuffkeeper-data-label.h"
    #include "stuffkeeper-data-entry.h"
    #include "stuffkeeper-data-taglist.h"
    #include "stuffkeeper-edit-schema.h"
    #include "stuffkeeper-show-item.h"
%}

class StuffKeeper:Item:Window from Gtk:Dialog
{
    private guint signal_item_removed = {0};
    private StuffKeeperDataItem *item = {NULL};
    private StuffKeeperDataBackend *skdb= {NULL};
    private GKeyFile *config_file = {NULL};

    private 
    void
    interface_header_changed(GtkWidget *widget, GtkStyle *old, GtkWidget *wid)
    {
        gtk_widget_modify_bg(GTK_WIDGET(wid), GTK_STATE_NORMAL, &(widget->style->bg[GTK_STATE_SELECTED]));
        gtk_widget_modify_fg(GTK_WIDGET(wid), GTK_STATE_NORMAL, &(widget->style->fg[GTK_STATE_SELECTED]));
        gtk_widget_modify_text(GTK_WIDGET(wid), GTK_STATE_NORMAL, &(widget->style->text[GTK_STATE_SELECTED]));
    }

    private
    void
    item_removed(self, gint id, StuffKeeperDataBackend *skdb)
    {
        gint gid = stuffkeeper_data_item_get_id(self->_priv->item);
        debug_printf("%i-%i\n", gid, id);
        if(gid == id)
        {
            debug_printf("destroying\n");
            gtk_dialog_response(GTK_DIALOG(self), GTK_RESPONSE_CLOSE);
        }
    }

    private 
    void
    response(self, int response, gpointer data)
    {
        int size_w, size_h;
        if(self->_priv->signal_item_removed) { 
            g_signal_handler_disconnect(G_OBJECT(self->_priv->skdb), self->_priv->signal_item_removed);
            self->_priv->signal_item_removed = 0;
        }
        debug_printf("response\n");
        gtk_window_get_size(GTK_WINDOW(self), &size_w, &size_h);
        g_key_file_set_integer(self->_priv->config_file, "ITEM_WINDOW", "width", size_w);
        g_key_file_set_integer(self->_priv->config_file, "ITEM_WINDOW", "height", size_h);

        gtk_widget_destroy(GTK_WIDGET(self));
    }
    private 
    void
    schema_edit_button_clicked(self, GtkWidget *button)
    {
        StuffKeeperDataSchema *schema = g_object_get_data(G_OBJECT(button), "schema");
        if(schema)
        {
            StuffKeeperEditSchema *skes = stuffkeeper_edit_schema_new();
            stuffkeeper_edit_schema_set_schema(skes, schema);
        }
    }
    /**
     * Popup an item list
     */
    public
        void 
        new (StuffKeeper:Data:Backend *skdb, StuffKeeper:Data:Item *item, GKeyFile *config_file)
        {                                                                                                                                            
            Self *self = GET_NEW;
            GError *error = NULL;
            gint width, height;
            GtkWidget *dialog = GTK_WIDGET(self);
            gtk_dialog_add_button(GTK_DIALOG(self), "gtk-close", GTK_RESPONSE_CLOSE);
            gtk_dialog_set_has_separator(GTK_DIALOG(self), FALSE);

            /**/
            GtkWidget *container = gtk_vbox_new(FALSE, 6);
            GtkWidget *sw = NULL; 
            //GtkWidget *vbox;
            //GtkWidget *label1,*button;
            GtkWidget *event2; 

            self->_priv->config_file = config_file;
            self->_priv->item = item;
            self->_priv->skdb = skdb;
            self->_priv->signal_item_removed = g_signal_connect_swapped(G_OBJECT(skdb), "item-removed",
                    G_CALLBACK(self_item_removed), self);


            /* set size */
            gtk_window_set_default_size(GTK_WINDOW(dialog), 500,600);
            width = g_key_file_get_integer(self->_priv->config_file, "ITEM_WINDOW", "width", &error);
            if(error) {
                g_error_free(error);
                error = NULL;
            } else {
                height = g_key_file_get_integer(self->_priv->config_file, "ITEM_WINDOW", "height", &error);
                if(error) {
                    g_error_free(error);
                    error = NULL;
                } else {
                    gtk_window_resize(GTK_WINDOW(self), width, height);
                }
            }




            gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox), container, TRUE, TRUE, 0);
            gtk_container_set_border_width(GTK_CONTAINER(container), 9);
            /* The title */
            GtkWidget *vbox,*vbox2;
            GtkWidget *label1,*button;
            /**
             * Header
             */
            event2 = gtk_event_box_new();
            vbox = gtk_hbox_new(FALSE, 6);
            vbox2 = gtk_vbox_new(FALSE,6);
            gtk_container_set_border_width(GTK_CONTAINER(vbox2), 8);
            /* Title */
            label1 = gtk_label_new("");
            gtk_label_set_markup(GTK_LABEL(label1), "<b>Title:</b>");
            gtk_misc_set_alignment(GTK_MISC(label1), 1,0.5);
            gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);
            self_interface_header_changed(dialog, NULL, label1);
            g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            

            label1 = stuffkeeper_data_entry_new(item,NULL);
            gtk_box_pack_start(GTK_BOX(vbox),label1, TRUE,TRUE, 0);

            /* type */
            StuffKeeperDataSchema *schema = stuffkeeper_data_item_get_schema(item);
            label1 =gtk_label_new("");
            gtk_label_set_markup(GTK_LABEL(label1), "<b>Type:</b>");
            gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);
            self_interface_header_changed(dialog, NULL, label1);
            g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            

            if(schema) {
                label1 = stuffkeeper_data_label_new_schema(schema);
            } else {
                label1 = gtk_label_new("N/A");
            }

            button = gtk_button_new();
            gtk_container_add(GTK_CONTAINER(button), label1);
            g_object_set_data(G_OBJECT(button), "schema", schema);
            gtk_button_set_relief(GTK_BUTTON(button),GTK_RELIEF_NONE); 
            gtk_box_pack_start(GTK_BOX(vbox),button, FALSE,TRUE, 0);
            g_signal_connect_swapped(G_OBJECT(button), "clicked", G_CALLBACK(self_schema_edit_button_clicked), self);



            self_interface_header_changed(dialog, NULL, event2);
            g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),event2);            


            gtk_box_pack_start(GTK_BOX(vbox2), vbox, FALSE, TRUE, 0);
            vbox = gtk_hbox_new(FALSE, 6);
            if(stuffkeeper_data_item_get_creation_time(item) > 0)
            {
                label1 = gtk_label_new("");
                time_t time = stuffkeeper_data_item_get_creation_time(item);
                struct tm *t  = localtime(&time);
                char buffer[256];
                strftime(buffer,256, "%x", t);
                gchar *markup = g_markup_printf_escaped("<b>%s:</b> %s",_("Created"), buffer); 
                gtk_misc_set_alignment(GTK_MISC(label1), 0,0.5);
                gtk_label_set_markup(GTK_LABEL(label1), markup);
                g_free(markup);
                gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);
                self_interface_header_changed(dialog, NULL, label1);
                g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            
            }
            if(stuffkeeper_data_item_get_modification_time(item) > 0)
            {
                label1 = gtk_label_new("");
                gchar *markup = g_markup_printf_escaped("<b>%s:</b>",_("Modified")); 
                gtk_misc_set_alignment(GTK_MISC(label1), 0,0.5);
                gtk_label_set_markup(GTK_LABEL(label1), markup);
                g_free(markup);
                gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);
                self_interface_header_changed(dialog, NULL, label1);
                g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            
                label1 = stuffkeeper_data_label_new_modifcation_time_item(item);
                gtk_box_pack_start(GTK_BOX(vbox),label1, FALSE,TRUE, 0);
                self_interface_header_changed(dialog, NULL, label1);
                g_signal_connect(dialog, "style-set", G_CALLBACK(self_interface_header_changed),label1);            
            }
            gtk_box_pack_start(GTK_BOX(vbox2), vbox, FALSE, TRUE, 0);
            gtk_container_add(GTK_CONTAINER(event2), vbox2);
            gtk_box_pack_start(GTK_BOX(container),event2, FALSE,TRUE, 0);





            /**
             * Get the attached schema and fill in the rest from there
             */

            /* num fields + one for the tags */
            vbox = stuffkeeper_show_item_new(item);
            gtk_table_set_row_spacings(GTK_TABLE(vbox), 6);
            gtk_table_set_col_spacings(GTK_TABLE(vbox), 6);
            gtk_container_set_border_width(GTK_CONTAINER(vbox), 12);            

            event2 = gtk_event_box_new();
            gtk_widget_modify_bg(event2, GTK_STATE_NORMAL, &((dialog)->style->base[GTK_STATE_NORMAL]));

            sw = gtk_scrolled_window_new(FALSE, FALSE);
            gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(sw), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
            gtk_container_add(GTK_CONTAINER(event2), vbox);
            gtk_scrolled_window_add_with_viewport(GTK_SCROLLED_WINDOW(sw), event2);
            gtk_box_pack_start(GTK_BOX(container),sw, TRUE,TRUE, 0);

            /* Title */
/*            
            vbox = gtk_hbox_new(FALSE,6);
            label1 = gtk_label_new("");
            gchar *val = g_markup_printf_escaped("<b>%s</b>", "Tags");
            gtk_label_set_markup(GTK_LABEL(label1), val);
            g_free(val);
            gtk_misc_set_alignment(GTK_MISC(label1), 1,0);
            gtk_box_pack_start(GTK_BOX(vbox), label1, FALSE, TRUE, 0);

            label1 = stuffkeeper_data_taglist2_new(skdb,item);
            gtk_box_pack_start(GTK_BOX(container), label1, FALSE, FALSE, 0);

            label1 = stuffkeeper_data_taglist_new(skdb,item);

            gtk_table_set_row_spacings(GTK_TABLE(label1), 6);
            gtk_table_set_col_spacings(GTK_TABLE(label1), 18);

            gtk_box_pack_start(GTK_BOX(vbox), label1, FALSE, FALSE, 0);


            gtk_box_pack_start(GTK_BOX(container),vbox, FALSE,TRUE, 6);
*/

            g_signal_connect(G_OBJECT(dialog), "response", G_CALLBACK(self_response), NULL);
            gtk_widget_show_all(dialog);
        }
}
