requires 2.0.10

%{
    #include "stuffkeeper-data-item.h"
%}

%ph{
#include <glib/gstdio.h>
#include <stdio.h>

#define KEYFILE_GENERAL "general"
#define SAVE_TIMEOUT 30000

%}

class StuffKeeper:Data:Tag from G:Object 
{
    private gboolean changed = {FALSE};
    private GKeyFile *data = {NULL};
    private char * path = {NULL} destroywith g_free;

    private GList *items = {NULL} destroywith g_list_free;

    private guint save_timeout = {0};

    /**
     * Signals 
     */
    signal last NONE (NONE)
        void
        tag_changed(self)
        {
        
        }

    private
        void
        mark_changed(self)
        {
            if(self->_priv->save_timeout)
            {
                g_source_remove(self->_priv->save_timeout);
                self->_priv->save_timeout = 0;
            }
            self->_priv->changed = TRUE;

            self->_priv->save_timeout = g_timeout_add(SAVE_TIMEOUT, (GSourceFunc)self_save_yourself, self);
        }


    /**
     * Constructors
     */

    public
        StuffKeeperDataTag*
        new_from_file (const gchar *file)
        {
            Self *obj = GET_NEW;
            obj->_priv->data = g_key_file_new();
            obj->_priv->path = g_strdup(file);
            g_key_file_load_from_file(obj->_priv->data, obj->_priv->path, G_KEY_FILE_KEEP_COMMENTS, NULL);
            /* Mark unchanged */
            obj->_priv->changed = FALSE;
            if(obj->_priv->save_timeout)
            {
                g_source_remove(obj->_priv->save_timeout);
                obj->_priv->save_timeout = 0;
            }

            return obj;
        }

    public
        StuffKeeperDataTag*
        new_with_id (const gchar *path,gint id)
        {
            Self *obj = GET_NEW;
            obj->_priv->path = g_strdup_printf("%s%c%i", path, G_DIR_SEPARATOR,id);
            obj->_priv->data = g_key_file_new();
            g_key_file_set_integer(obj->_priv->data, KEYFILE_GENERAL,"id", id);
            self_save_yourself(obj);
            return obj;
        }

    /**
     * ID (ro)
     */
    public
        gint
        get_id(self)
        {
            gint id = g_key_file_get_integer(self->_priv->data, KEYFILE_GENERAL, "id",NULL);
            return id;
        }

    /**
     * Title (rw)
     */
    public 
    gchar *
    get_title(self)
    {
        return g_key_file_get_string(self->_priv->data, KEYFILE_GENERAL, "title", NULL); 
    }


    public 
    void
    set_title(self, const gchar *title)
    {
        g_key_file_set_string(self->_priv->data, KEYFILE_GENERAL, "title", title);
        self_tag_changed(self);
        /* Mark changed */
        self_mark_changed(self);
    }


    /**
     * Functions to manage 
     */
    public
        void
        save_yourself(self)
        {

            if(self->_priv->data && self->_priv->changed == TRUE)
            {
                char *content;
                gsize size=0;
                printf("Saving myself tag\n");

                content = g_key_file_to_data(self->_priv->data,&size, NULL);
                g_file_set_contents(self->_priv->path, content, size, NULL);

                g_free(content);
                /* Mark changed */
                self->_priv->changed = FALSE;
            }
            if(self->_priv->save_timeout)
            {
                g_source_remove(self->_priv->save_timeout);
                self->_priv->save_timeout = 0;
            }
        }

    public
        void
        delete_yourself(self)
        {
            g_key_file_set_integer(self->_priv->data, KEYFILE_GENERAL,"id", -1);
            g_unlink(self->_priv->path);
            g_free(self->_priv->path);
            self->_priv->path = NULL;
        }

    public
    int
    num_items(self)
    {
        return g_list_length(self->_priv->items);
    }
    public
    void
    add_item(self, GObject *item)
    {
        self->_priv->items = g_list_append(self->_priv->items, STUFFKEEPER_DATA_ITEM(item));
        self_tag_changed(self);
    }
    public 
    void
    remove_item(self, GObject *item)
    {
        self->_priv->items = g_list_remove(self->_priv->items, STUFFKEEPER_DATA_ITEM(item));
        self_tag_changed(self);
    }
    override (G:Object)
        void
        finalize(G:Object *obj)
        {
            Self *self = SELF(obj);
            printf("destroying tag\n");
            if(self->_priv->save_timeout)
            {
                g_source_remove(self->_priv->save_timeout);
                self->_priv->save_timeout = 0;
            }
        }



}
