requires 2.0.10

%h{
#include <sqlite3.h>
%}
%{

#include "stuffkeeper-data-item.h"
%}

%ph{
#include <glib/gstdio.h>
#include <stdio.h>

#include "debug.h"

#define KEYFILE_GENERAL "general"
#define SAVE_TIMEOUT 30000

%}

class Stuffkeeper:Data:Tag from G:Object 
{
    private GList *items = {NULL} destroywith g_list_free;
    private sqlite3 *sqlHandle = {NULL};
    private gint id = {0};

    /**
     * Signals 
     */
    private
    signal last NONE (NONE)
        void
        tag_changed(self)
        {
        
        }

   
    /**
     * Constructors
     */
    public
    StuffkeeperDataTag *
    open_from_id(sqlite3 *sqlHandle, gint id)
    {
        Self *obj = GET_NEW;
        obj->_priv->id = id;
        obj->_priv->sqlHandle = sqlHandle;
        return obj;
    }
    public
        StuffkeeperDataTag*
        new(sqlite3 *sqlHandle)
        {
            Self *obj = GET_NEW;
            int result = 0;
            char *error = NULL;
            char *query  = NULL;


            obj->_priv->sqlHandle = sqlHandle;

            query = sqlite3_mprintf
                ("INSERT INTO 'Tags' ('mtime','name')"
                 "values (%i,'%q');",
                 (int)time(NULL), "New Tag");

            result = sqlite3_exec(obj->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
            obj->_priv->id = sqlite3_last_insert_rowid(obj->_priv->sqlHandle);

            return obj;
        }
    public
    StuffkeeperDataTag*
    new_with_id(sqlite3 *sqlHandle, gint id)
    {
        Self *obj = GET_NEW;
        int result = 0;
        char *error = NULL;
        char *query  = NULL;


        obj->_priv->sqlHandle = sqlHandle;

        query = sqlite3_mprintf
            ("INSERT INTO 'Tags' ('id','mtime','name')"
             "values (%i,%i,'%q');",
             id,(int)time(NULL), "New Tag");

        result = sqlite3_exec(obj->_priv->sqlHandle, query, NULL, NULL, &error);
        if (result != SQLITE_OK) {
            printf("failed: %s\n", error);
        }
        sqlite3_free(query);
        obj->_priv->id = id; 

        return obj;
    }


    /**
     * ID (ro)
     */
    public
        gint
        get_id(self)
        {
            return self->_priv->id;
        }

    /**
     * Title (rw)
     */
    public 
    gchar *
    get_title(self)
    {
        char *retv = NULL;
        char *query = sqlite3_mprintf("SELECT name FROM Tags WHERE id=%i", self->_priv->id);
        sqlite3_stmt *stmt;
        const char *tail;
        int r;
        r = sqlite3_prepare_v2(self->_priv->sqlHandle, query, -1,  &stmt,  &tail);
        if (r == SQLITE_OK)
        {
            if((r = sqlite3_step(stmt)) == SQLITE_ROW)
            {
                retv = g_strdup((gchar *)sqlite3_column_text(stmt, 0));
            }
        }
        sqlite3_finalize(stmt);

        if(retv == NULL)
            retv = g_strdup("Failed to get row");

        sqlite3_free(query);
        return retv; 
    }


    public 
    void
    set_title(self, const gchar *title)
    {
        int result;
        char *error;
        char *query =  sqlite3_mprintf("UPDATE Tags SET mtime=%i,name=%Q WHERE id=%i",(int)time(NULL), title, self->_priv->id);
        result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
        if (result != SQLITE_OK) {
            printf("failed: %s\n", error);
        }
        sqlite3_free(query);
        self_tag_changed(self);
    }


    /**
     * Functions to manage 
     */


    public
        void
        delete_yourself(self)
        {
            int result;
            char *error;
            char *query =  sqlite3_mprintf("DELETE FROM Tags WHERE id=%i",self->_priv->id);
            result = sqlite3_exec(self->_priv->sqlHandle, query, NULL, NULL, &error);
            if (result != SQLITE_OK) {
                printf("failed: %s\n", error);
            }
            sqlite3_free(query);
            self->_priv->id = 0;
        }

    public
    int
    num_items(self)
    {
        return g_list_length(self->_priv->items);
    }
    public
    void
    add_item(self, GObject *item)
    {
        self->_priv->items = g_list_append(self->_priv->items, STUFFKEEPER_DATA_ITEM(item));
        self_tag_changed(self);
    }
    public 
    void
    remove_item(self, GObject *item)
    {
        self->_priv->items = g_list_remove(self->_priv->items, STUFFKEEPER_DATA_ITEM(item));
        self_tag_changed(self);
    }
    override (G:Object)
        void
        finalize(G:Object *obj)
        {
            debug_printf("destroying tag\n");
            PARENT_HANDLER(obj);
        }
}
